[
    {
        "question": "¬øQu√© es React?",
        "explanation": "**React es una biblioteca de JavaScript de c√≥digo abierto para construir interfaces de usuario.** Est√° basada en la componetizaci√≥n de la UI: la interfaz se divide en componentes independientes, que contienen su propio estado. Cuando el estado de un componente cambia, React vuelve a renderizar la interfaz.\n\nEsto hace que React sea una herramienta muy √∫til para construir interfaces complejas, ya que permite dividir la interfaz en piezas m√°s peque√±as y reutilizables.\n\nFue creada en 2011 por Jordan Walke, un ingeniero de software que trabajaba en Facebook y que quer√≠a simplificar la forma de crear interfaces de usuario complejas.\n\nEs una biblioteca muy popular y es usada por muchas empresas como Facebook, Netflix, Airbnb, Twitter, Instagram, etc.\n\nEnlaces de inter√©s:\n\n- [Curso de React.js](https://midu.link/react)\n- [Documentaci√≥n oficial de React en Espa√±ol](https://es.reactjs.org/)\n- [Introduction to React.js de Facebook (2013)](https://www.youtube.com/watch?v=XxVg_s8xAms)\n- [Documentaci√≥n oficial de React actualizada](https://beta.reactjs.org/) en ingl√©s\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "**React es una biblioteca de JavaScript de c√≥digo abierto para construir interfaces de usuario",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øCu√°les son las caracter√≠sticas principales de React?",
        "explanation": "Las caracter√≠sticas principales de React son:\n\n- **Componentes**: React est√° basado en la componetizaci√≥n de la UI. La interfaz se divide en componentes independientes, que contienen su propio estado. Cuando el estado de un componente cambia, React vuelve a renderizar la interfaz.\n\n- **Virtual DOM**: React usa un DOM virtual para renderizar los componentes. El DOM virtual es una representaci√≥n en memoria del DOM real. Cuando el estado de un componente cambia, React vuelve a renderizar la interfaz. En lugar de modificar el DOM real, React modifica el DOM virtual y, a continuaci√≥n, compara el DOM virtual con el DOM real. De esta forma, React sabe qu√© cambios se deben aplicar al DOM real.\n\n- **Declarativo**: React es declarativo, lo que significa que no se especifica c√≥mo se debe realizar una tarea, sino qu√© se debe realizar. Esto hace que el c√≥digo sea m√°s f√°cil de entender y de mantener.\n\n- **Unidireccional**: React es unidireccional, lo que significa que los datos fluyen en una sola direcci√≥n. Los datos fluyen de los componentes padres a los componentes hijos.\n\n- **Universal**: React se puede ejecutar tanto en el cliente como en el servidor. Adem√°s, puedes usar React Native para crear aplicaciones nativas para Android e iOS.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Las caracter√≠sticas principales de React son:\n\n- **Componentes**: React est√° basado en la componetizaci√≥n de la UI",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© significa exactamente que sea declarativo?",
        "explanation": "No le decimos c√≥mo debe renderizar la interfaz a base de instrucciones. Le decimos qu√© debe renderizar y React se encarga de renderizarlo.\n\nUn ejemplo entre declarativo e imperativo:\n\n```js\n// Declarativo\nconst element = <h1>Hello, world</h1>\n\n// Imperativo\nconst element = document.createElement('h1')\nelement.innerHTML = 'Hello, world'\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "No le decimos c√≥mo debe renderizar la interfaz a base de instrucciones",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es un componente?",
        "explanation": "Un componente es una pieza de c√≥digo que renderiza una parte de la interfaz. Los componentes pueden ser parametrizados, reutilizados y pueden contener su propio estado.\n\nEn React los componentes se crean usando funciones o clases.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Un componente es una pieza de c√≥digo que renderiza una parte de la interfaz",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es JSX?",
        "explanation": "React usa JSX para declarar qu√© debe renderizar. JSX es una extensi√≥n de JavaScript que permite escribir un c√≥digo m√°s cercano visualmente a HTML, que mejora la legibilidad del c√≥digo y hace que sea m√°s f√°cil de entender.\n\nSin JSX, deber√≠amos usar `React.createElement` para crear los elementos de la interfaz manualmente de esta forma:\n\n```js\nimport { createElement } from 'react'\n\nfunction Hello () { // un componente es una funci√≥n! üëÄ\n  return React.createElement(\n    'h1', // elemento a renderizar\n     null, // atributos del elemento\n    'Hola Mundo üëãüåç!' // contenido del elemento\n  )\n}\n```\n\nEsto es muy tedioso y poco legible. Por eso, React usa JSX para declarar qu√© debe renderizar. Por eso usamos JSX de esta forma:\n\n```jsx\nfunction Hello () {\n  return <h1>Hola Mundo üëãüåç!</h1>\n}\n```\n\nAmbos c√≥digos son equivalentes.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "React usa JSX para declarar qu√© debe renderizar",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo se transforma el JSX?",
        "explanation": "**El JSX se transforma en c√≥digo JavaScript compatible en el navegador usando un *transpilador* o *compilador***. El m√°s famoso es a d√≠a de hoy Babel, que utiliza una serie de plugins para ser compatible con la transformaci√≥n, pero existen otros como SWC.\n\nPuedes ver c√≥mo se transforma el JSX en el [playground de c√≥digo de Babel](https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABACQKYBt10QCgJSIDeAUIogE6pQjlIA8AFgIwB8yc6AhogLLgAm2QLwbgaR3APBuBYfYCEdAPTMWxAL5A&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.19.5&externalPlugins=&assumptions=%7B%7D).\n\nHay casos especiales en los que un transpilador no es necesario. Por ejemplo, **Deno tiene soporte nativo para la sintaxis JSX** y no es necesario transformar el c√≥digo para hacerlo compatible.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "**El JSX se transforma en c√≥digo JavaScript compatible en el navegador usando un *transpilador* o *compilador***",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øCu√°l es la diferencia entre componente y elemento en React?",
        "explanation": "Un componente es una funci√≥n o clase que recibe props y devuelve un elemento.\nUn elemento es un objeto que representa un nodo del DOM o una instancia de un componente de React.\n\n```js\n// Elemento que representa un nodo del DOM\n{\n  type: 'button',\n  props: {\n    className: 'button button-blue',\n    children: {\n      type: 'b',\n      props: {\n        children: 'OK!'\n      }\n    }\n  }\n}\n\n// Elemento que representa una instancia de un componente\n{\n  type: Button,\n  props: {\n    color: 'blue',\n    children: 'OK!'\n  }\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Un componente es una funci√≥n o clase que recibe props y devuelve un elemento",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo crear un componente en React?",
        "explanation": "Los componentes en React son funciones o clases que devuelven un elemento de React. Hoy en d√≠a lo m√°s recomendado es usar funciones:\n\n```jsx\nfunction HelloWorld() {\n  return <h1>Hello World!</h1>\n}\n```\n\nPero tambi√©n puedes usar una clase para crear un componente React:\n\n```jsx\nimport { Component } from 'react'\n\nclass HelloWorld extends Component {\n  render() {\n    return <h1>Hello World!</h1>\n  }\n}\n```\n\nLo importante es que el nombre de la funci√≥n o clase empiece con una letra may√∫scula. Esto es necesario para que React pueda distinguir entre componentes y elementos HTML.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los componentes en React son funciones o clases que devuelven un elemento de React",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son las props en React?",
        "explanation": "Las props son las propiedades de un componente. Son datos que se pasan de un componente a otro. Por ejemplo, si tienes un componente `Button` que muestra un bot√≥n, puedes pasarle una prop `text` para que el bot√≥n muestre ese texto:\n\n```jsx\nfunction Button(props) {\n  return <button>{props.text}</button>\n}\n```\n\nPodr√≠amos entender que el componente `Button` es un bot√≥n gen√©rico, y que la prop `text` es el texto que se muestra en el bot√≥n. As√≠ estamos creando un componente reutilizable.\n\nDebe considerarse adem√°s que al usar cualquier expresi√≥n JavaScript dentro de JSX debe envolverlos con `{}`, en este caso el objeto `props`, de otra forma JSX lo considerar√° como texto plano.\n\nPara usarlo, indicamos el nombre del componente y le pasamos las props que queremos:\n\n```jsx\n<Button text=\"Haz clic aqu√≠\" />\n<Button text=\"Seguir a @midudev\" />\n```\n\nLas props son una forma de parametrizar nuestros componentes igual que hacemos con las funciones. Podemos pasarle cualquier tipo de dato a un componente, incluso otros componentes.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Las props son las propiedades de un componente",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es y para qu√© sirve la prop `children` en React?",
        "explanation": "La prop `children` es una prop especial que se pasa a los componentes. Es un objeto que contiene los elementos que envuelve un componente.\n\nPor ejemplo, si tenemos un componente `Card` que muestra una tarjeta con un t√≠tulo y un contenido, podemos usar la prop `children` para mostrar el contenido:\n\n```jsx\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <h2>{props.title}</h2>\n      <div>{props.children}</div>\n    </div>\n  )\n}\n```\n\nY luego podemos usarlo de la siguiente forma:\n\n```jsx\n<Card title=\"T√≠tulo de la tarjeta\">\n  <p>Contenido de la tarjeta</p>\n</Card>\n```\n\nEn este caso, la prop `children` contiene el elemento `<p>Contenido de la tarjeta</p>`.\n\nConocer y saber usar la prop `children` es muy importante para crear componentes reutilizables en React.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "La prop `children` es una prop especial que se pasa a los componentes",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© diferencia hay entre props y state?",
        "explanation": "Las *props* son un objeto que **se pasan como argumentos de un componente padre a un componente hijo**. Son inmutables y no se pueden modificar desde el componente hijo.\n\nEl *state* es un valor que **se define dentro de un componente**. Su valor es inmutable (no se puede modificar directamente) pero se puede establecer un valor nuevo del estado para que React vuelva a renderizar el componente.\n\nAs√≠ que mientras tanto *props* como *state* afectan al renderizado del componente, su gesti√≥n es diferente.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Las *props* son un objeto que **se pasan como argumentos de un componente padre a un componente hijo**",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øSe puede inicializar un estado con el valor de una prop? ¬øQu√© pasa si lo haces y qu√© hay que tener en cuenta?",
        "explanation": "S√≠, se puede inicializar el estado con el valor de una prop. Pero hay que tener en cuenta que, si la prop cambia, el estado no se actualizar√° autom√°ticamente. Esto es porque el estado se inicializa una vez, cuando el componente se monta por primera vez.\n\nPor ejemplo, con componentes funcionales:\n\n```jsx\nconst Counter = () => {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <Count count={count} />\n      <button onClick={() => setCount(count + 1)}>Aumentar</button>\n    </div>\n  )\n}\n\nconst Count = ({ count }) => {\n  const [number, setNumber] = useState(count)\n\n  return <p>{number}</p>\n}\n```\n\nEn este caso, el componente `Count` inicializa su estado con el valor de la prop `count`. Pero si cambia el valor de la prop `count`, el estado no se actualizar√° autom√°ticamente. Por lo que al hacer click, siempre veremos el n√∫mero 0 en pantalla.\n\n- [C√≥digo de ejemplo](https://stackblitz.com/edit/react-ts-cdf8n9?file=App.tsx)\n\nEn este ejemplo, lo mejor ser√≠a simplemente usar la prop `count` en el componente `Count` y as√≠ siempre se volver√≠a a renderizar.\n\n**Es una buena pr√°ctica evitar al m√°ximo los estados de nuestros componentes y, siempre que se pueda, simplemente calcular el valor a mostrar a partir de las props.**\n\nEn el caso que necesites inicializar un estado con una prop, es una buena pr√°ctica a√±adir el prefijo de `initial` a la prop para indicar que es el valor inicial del estado y que luego no lo usaremos m√°s:\n\n```jsx\nconst Input = ({ initialValue }) => {\n  const [value, setValue] = useState(initialValue)\n\n  return (\n    <input\n      value={value}\n      onChange={e => setValue(e.target.value)}\n    />\n  )\n}\n```\n\nEs un error muy com√∫n pensar que la prop actualizar√° el estado, as√≠ que tenlo en cuenta.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "S√≠, se puede inicializar el estado con el valor de una prop",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el renderizado condicional en React?",
        "explanation": "El renderizado condicional es la forma de mostrar un componente u otro dependiendo de una condici√≥n.\n\nPara hacer renderizado condicional en React usamos el operador ternario:\n\n```jsx\nfunction Button({ text }) {\n  return text\n    ? <button>{text}</button>\n    : null\n}\n```\n\nEn este caso, si la prop `text` existe, se renderiza el bot√≥n. Si no existe, no se renderiza nada.\n\nEs com√∫n encontrar implementaciones del renderizado condicional con el operador `&&`, del tipo:\n\n```jsx\nfunction List({ listArray }) {\n  return listArray?.length && listArray.map(item=>item)\n}\n```\n\nParece que tiene sentido... si el `length` es positivo (mayor a cero) pintamos el map. !Pues no! ‚ùå Cuidado, si tiene `length` de cero ya que se pintar√° en el navegador un 0.\n\nEs preferible utilizar el operador ternario. *Kent C. Dodds* tiene un art√≠culo interesante hablando del tema. [Use ternaries rather than && in JSX](https://kentcdodds.com/blog/use-ternaries-rather-than-and-and-in-jsx)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El renderizado condicional es la forma de mostrar un componente u otro dependiendo de una condici√≥n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes aplicar clases CSS a un componente en React y por qu√© no se puede usar `class`?",
        "explanation": "Para aplicar clases CSS a un componente en React usamos la prop `className`:\n\n```jsx\nfunction Button({ text }) {\n  return (\n    <button className=\"button\">\n      {text}\n    </button>\n  )\n}\n```\n\nLa raz√≥n por la que se llama `className` es porque `class` es una palabra reservada en JavaScript. Por eso, en JSX, tenemos que usar `className` para aplicar clases CSS.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para aplicar clases CSS a un componente en React usamos la prop `className`:\n\n```jsx\nfunction Button({ text }) {\n  return (\n    <button className=\"button\">\n      {text}\n    </button>\n  )\n}\n```\n\nLa raz√≥n por la que se llama `className` es porque `class` es una palabra reservada en JavaScript",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes aplicar estilos en l√≠nea a un componente en React?",
        "explanation": "Para aplicar estilos CSS en l√≠nea a un componente en React usamos la prop `style`. La diferencia de c√≥mo lo har√≠amos con HTML, es que en React los estilos se pasan como un objeto y no como una cadena de texto (esto puede verse m√°s claro con los dobles corchetes, los primeros para indicar que es una expresi√≥n JavaScript, y los segundos para crear el objeto):\n\n```jsx\nfunction Button({ text }) {\n  return (\n    <button style={{ color: 'red', borderRadius: '2px' }}>\n      {text}\n    </button>\n  )\n}\n```\n\nF√≠jate que, adem√°s, los nombres de las propiedades CSS est√°n en camelCase.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para aplicar estilos CSS en l√≠nea a un componente en React usamos la prop `style`",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedo aplicar estilos de forma condicional a un componente en React?",
        "explanation": "Puedes aplicar estilos de forma condicional a un componente en React usando la prop `style` y un operador ternario:\n\n```jsx\nfunction Button({ text, primary }) {\n  return (\n    <button style={{ color: primary ? 'red' : 'blue' }}>\n      {text}\n    </button>\n  )\n}\n```\n\nEn el caso anterior, si la prop `primary` es `true`, el bot√≥n tendr√° el color rojo. Si no, tendr√° el color azul.\n\nTambi√©n puedes seguir la misma mec√°nica usando clases. En este caso, usamos el operador ternario para decidir si a√±adir o no la clase:\n\n```jsx\nfunction Button({ text, primary }) {\n  return (\n    <button className={primary ? 'button-primary' : ''}>\n      {text}\n    </button>\n  )\n}\n```\n\nTambi√©n podemos usar bibliotecas como `classnames`:\n\n```jsx\nimport classnames from 'classnames'\n\nfunction Button({ text, primary }) {\n  return (\n    <button className={classnames('button', { primary })}>\n      {text}\n    </button>\n  )\n}\n```\n\nEn este caso, si la prop `primary` es `true`, se a√±adir√° la clase `primary` al bot√≥n. Si no, no se a√±adir√°. En cambio la clase `button` siempre se a√±adir√°.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Puedes aplicar estilos de forma condicional a un componente en React usando la prop `style` y un operador ternario:\n\n```jsx\nfunction Button({ text, primary }) {\n  return (\n    <button style={{ color: primary ? 'red' : 'blue' }}>\n      {text}\n    </button>\n  )\n}\n```\n\nEn el caso anterior, si la prop `primary` es `true`, el bot√≥n tendr√° el color rojo",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el renderizado de listas en React?",
        "explanation": "El renderizado de listas es la forma de iterar un array de elementos y renderizar elementos de React para cada uno de ellos.\n\nPara hacer renderizado de listas en React usamos el m√©todo `map` de los arrays:\n\n```jsx\nfunction List({ items }) {\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>{item.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nEn este caso, se renderiza una lista de elementos usando el componente `List`. El componente `List` recibe una prop `items` que es un array de objetos del tipo `[{ id: 1, name: \"John Doe\" }]`. El componente `List` renderiza un elemento `li` por cada elemento del array.\n\nEl elemento `li` tiene una prop `key` que es un identificador √∫nico para cada elemento. Esto es necesario para que React pueda identificar cada elemento de la lista y actualizarlo de forma eficiente. M√°s adelante hay una explicaci√≥n m√°s detallada sobre esto.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El renderizado de listas es la forma de iterar un array de elementos y renderizar elementos de React para cada uno de ellos",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes escribir comentarios en React?",
        "explanation": "Si vas a escribir un comentario fuera del renderizado de un componente, puedes usar la sintaxis de comentarios de JavaScript sin problemas:\n\n```jsx\nfunction Button({ text }) {\n  // Esto es un comentario\n  /* Esto es un comentario\n  de varias l√≠neas */\n\n  return (\n    <button>\n      {text}\n    </button>\n  )\n}\n```\n\nSi vas a escribir un comentario dentro del renderizado de un componente, debes envolver el comentario en llaves y usar siempre la sintaxis de comentarios de bloque:\n\n```jsx\nfunction Button({ text }) {\n  return (\n    <button>\n      {/* Esto es un comentario en el render */}\n      {text}\n    </button>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Si vas a escribir un comentario fuera del renderizado de un componente, puedes usar la sintaxis de comentarios de JavaScript sin problemas:\n\n```jsx\nfunction Button({ text }) {\n  // Esto es un comentario\n  /* Esto es un comentario\n  de varias l√≠neas */\n\n  return (\n    <button>\n      {text}\n    </button>\n  )\n}\n```\n\nSi vas a escribir un comentario dentro del renderizado de un componente, debes envolver el comentario en llaves y usar siempre la sintaxis de comentarios de bloque:\n\n```jsx\nfunction Button({ text }) {\n  return (\n    <button>\n      {/* Esto es un comentario en el render */}\n      {text}\n    </button>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---\n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo a√±adir un evento a un componente en React?",
        "explanation": "Para a√±adir un evento a un componente en React usamos la sintaxis `on` y el nombre del evento nativo del navegador en *camelCase*:\n\n```jsx\nfunction Button({ text, onClick }) {\n  return (\n    <button onClick={onClick}>\n      {text}\n    </button>\n  )\n}\n```\n\nEn este caso, el componente `Button` recibe una prop `onClick` que es una funci√≥n. Cuando el usuario hace clic en el bot√≥n, se ejecuta la funci√≥n `onClick`.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para a√±adir un evento a un componente en React usamos la sintaxis `on` y el nombre del evento nativo del navegador en *camelCase*:\n\n```jsx\nfunction Button({ text, onClick }) {\n  return (\n    <button onClick={onClick}>\n      {text}\n    </button>\n  )\n}\n```\n\nEn este caso, el componente `Button` recibe una prop `onClick` que es una funci√≥n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedo pasar un par√°metro a una funci√≥n que maneja un evento en React?",
        "explanation": "Para pasar un par√°metro a una funci√≥n que maneja un evento en React podemos usar una funci√≥n an√≥nima:\n\n```jsx\nfunction Button({ id, text, onClick }) {\n  return (\n    <button onClick={() => onClick(id)}>\n      {text}\n    </button>\n  )\n}\n```\n\nCuando el usuario hace clic en el bot√≥n, se ejecuta la funci√≥n `onClick` pas√°ndole como par√°metro el valor de la prop `id`.\n\nTambi√©n puedes crear una funci√≥n que ejecuta la funci√≥n `onClick` pas√°ndole el valor de la prop `id`:\n\n```jsx\nfunction Button({ id, text, onClick }) {\n  const handleClick = (event) => { // handleClick recibe el evento original\n    onClick(id)\n  }\n\n  return (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para pasar un par√°metro a una funci√≥n que maneja un evento en React podemos usar una funci√≥n an√≥nima:\n\n```jsx\nfunction Button({ id, text, onClick }) {\n  return (\n    <button onClick={() => onClick(id)}>\n      {text}\n    </button>\n  )\n}\n```\n\nCuando el usuario hace clic en el bot√≥n, se ejecuta la funci√≥n `onClick` pas√°ndole como par√°metro el valor de la prop `id`",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el estado en React?",
        "explanation": "El estado es un objeto que contiene datos que pueden cambiar en el tiempo. En React, el estado se usa para controlar los cambios en la interfaz.\n\nPara que entiendas el concepto, piensa en el interruptor de una habitaci√≥n. Estos interruptores suelen tener dos estados: encendido y apagado. Cuando accionamos el interruptor y lo ponemos en `on` entonces la luz se enciende y cuando lo ponemos en `off` la luz se apaga.\n\nEste mismo concepto se puede aplicar a la interfaz de usuario. Por ejemplo, el bot√≥n Me Gusta de Facebook tendr√≠a el estado de `meGusta` a `true` cuando el usuario le ha dado a Me Gusta y a `false` cuando no lo ha hecho.\n\nNo solo podemos tener en el estado valores booleanos, tambi√©n podemos tener objetos, arrays, n√∫meros, etc.\n\nPor ejemplo, si tienes un componente `Counter` que muestra un contador, puedes usar el estado para controlar el valor del contador.\n\nPara crear un estado en React usamos el hook `useState`:\n\n```jsx\nimport { useState } from 'react'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>Contador: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Aumentar</button>\n    </div>\n  )\n}\n```\n\nAl usar el hook `useState` este devolver√° un `array` de dos posiciones:\n\n0. El valor del estado.\n1. La funci√≥n para cambiar el estado.\n\nSuele usarse desestructuraci√≥n para facilitar la lectura y ahorrarnos algunas l√≠neas de c√≥digo. Por otro lado, al pasarle un dato como par√°metro al `useState` le estamos indicando su estado inicial.\n\nCon un componente de clase, la creaci√≥n del estado ser√≠a as√≠:\n\n```jsx\nimport { Component } from 'react'\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { count: 0 }\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Contador: {this.state.count}</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Aumentar\n        </button>\n      </div>\n    )\n  }\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El estado es un objeto que contiene datos que pueden cambiar en el tiempo",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son los hooks?",
        "explanation": "Los Hooks son una API de React que nos permite tener estado, y otras caracter√≠sticas de React, en los componentes creados con una function.\n\nEsto, antes, no era posible y nos obligaba a crear un componente con `class` para poder acceder a todas las posibilidades de la librer√≠a.\n\nHooks es gancho y, precisamente, lo que hacen, es que te permiten enganchar tus componentes funcionales a todas las caracter√≠sticas que ofrece React.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los Hooks son una API de React que nos permite tener estado, y otras caracter√≠sticas de React, en los componentes creados con una function",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© hace el hook `useState`?",
        "explanation": "El hook `useState` es utilizado para crear variables de estado, quiere decir que su valor es din√°mico, que este puede cambiar en el tiempo y eso requiere una re-renderizaci√≥n del componente donde se utiliza\n\nRecibe un par√°metro:\n\n- El valor inicial de nuestra variable de estado.\n\nDevuelve un array con dos variables:\n\n- En primer lugar tenemos la variable que contiene el valor\n- La siguiente variable es una funci√≥n set, requiere el nuevo valor del estado, y este modifica el valor de la variable que anteriormente mencionamos\n- Cabe destacar que la funci√≥n proporciona c√≥mo par√°metro el valor actual del propio estado. Ex: `setIsOpen(isOpen => !isOpen)`\n\nEn este ejemplo mostramos como el valor de `count` se inicializa en 0, y tambi√©n se renderiza cada vez que el valor es modificado con la funci√≥n `setCount` en el evento `onClick` del button:\n\n```jsx\nimport { useState } from 'react'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <p>Contador: {count}</p>\n      <button onClick={() => setCount(count => count + 1)}>Aumentar</button>\n    </>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El hook `useState` es utilizado para crear variables de estado, quiere decir que su valor es din√°mico, que este puede cambiar en el tiempo y eso requiere una re-renderizaci√≥n del componente donde se utiliza\n\nRecibe un par√°metro:\n\n- El valor inicial de nuestra variable de estado",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© significa la expresi√≥n \"subir el estado\"?",
        "explanation": "Cuando varios componentes necesitan compartir los mismos datos de un estado, entonces se recomienda elevar ese estado compartido hasta su ancestro com√∫n m√°s cercano.\n\nDicho de otra forma. Si dos componentes hijos comparten los mismos datos de su padre, entonces mueve el estado al padre en lugar de mantener un estado local en sus hijos.\n\nPara entenderlo, lo mejor es que lo veamos con un ejemplo. Imagina que tenemos una lista de regalos deseados y queremos poder a√±adir regalos y mostrar el total de regalos que hay en la lista.\n\n```jsx\nimport { useState } from 'react'\n\nexport default function App () {\n  return (\n    <>\n      <h1>Lista de regalos</h1>\n      <GiftList />\n      <TotalGifts />\n    </>\n  )\n}\n\nfunction GiftList () {\n  const [gifts, setGifts] = useState([])\n\n  const addGift = () => {\n    const newGift = prompt('¬øQu√© regalo quieres a√±adir?')\n    setGifts([...gifts, newGift])\n  }\n\n  return (\n    <>\n      <h2>Regalos</h2>\n      <ul>\n        {gifts.map(gift => (\n          <li key={gift}>{gift}</li>\n        ))}\n      </ul>\n      <button onClick={addGift}>A√±adir regalo</button>\n    </>\n  )\n}\n\nfunction TotalGifts () {\n  const [totalGifts, setTotalGifts] = useState(0)\n\n  return (\n    <>\n      <h2>Total de regalos</h2>\n      <p>{totalGifts}</p>\n    </>\n  )\n}\n```\n\n¬øQu√© pasa si queremos que el total de regalos se actualice cada vez que a√±adimos un regalo? Como podemos ver, no es posible porque el estado de `totalGifts` est√° en el componente `TotalGifts` y no en el componente `GiftList`. Y como no podemos acceder al estado de `GiftList` desde `TotalGifts`, no podemos actualizar el estado de `totalGifts` cuando a√±adimos un regalo.\n\nTenemos que subir el estado de `gifts` al componente padre `App` y le pasaremos el n√∫mero de regalos como prop al componente `TotalGifts`.\n\n```jsx\nimport { useState } from 'react'\n\nexport default function App () {\n  const [gifts, setGifts] = useState([])\n\n  const addGift = () => {\n    const newGift = prompt('¬øQu√© regalo quieres a√±adir?')\n    setGifts([...gifts, newGift])\n  }\n\n  return (\n    <>\n      <h1>Lista de regalos</h1>\n      <GiftList gifts={gifts} addGift={addGift} />\n      <TotalGifts totalGifts={gifts.length} />\n    </>\n  )\n}\n\nfunction GiftList ({ gifts, addGift }) {\n  return (\n    <>\n      <h2>Regalos</h2>\n      <ul>\n        {gifts.map(gift => (\n          <li key={gift}>{gift}</li>\n        ))}\n      </ul>\n      <button onClick={addGift}>A√±adir regalo</button>\n    </>\n  )\n}\n\nfunction TotalGifts ({ totalGifts }) {\n  return (\n    <>\n      <h2>Total de regalos</h2>\n      <p>{totalGifts}</p>\n    </>\n  )\n}\n```\n\nCon esto, lo que hemos hecho es *elevar el estado*. Lo hemos movido desde el componente `GiftList` al componente `App`. Ahora pasamos como prop los regalos al componente `GiftList` y una forma de actualizar el estado, y tambi√©n hemos pasado como prop al componente `TotalGifts` el n√∫mero de regalos.\n\n- [C√≥digo de ejemplo](https://stackblitz.com/edit/react-ts-qitkys?file=App.tsx)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Cuando varios componentes necesitan compartir los mismos datos de un estado, entonces se recomienda elevar ese estado compartido hasta su ancestro com√∫n m√°s cercano",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© hace el hook `useEffect`?",
        "explanation": "El hook `useEffect` se usa para ejecutar c√≥digo cuando se renderiza el componente o cuando cambian las dependencias del efecto.\n\nRecibe dos par√°metros:\n\n- La funci√≥n que se ejecutar√° al cambiar las dependencias o al renderizar el componente.\n- Un array de dependencias. Si cambia el valor de alguna dependencia, ejecutar√° la funci√≥n.\n\nEn este ejemplo mostramos un mensaje en consola cuando carga el componente y cada vez que cambia el valor de `count`:\n\n```jsx\nimport { useEffect, useState } from 'react'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    console.log('El contador se ha actualizado')\n  }, [count])\n\n  return (\n    <>\n      <p>Contador: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Aumentar</button>\n    </>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El hook `useEffect` se usa para ejecutar c√≥digo cuando se renderiza el componente o cuando cambian las dependencias del efecto",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "Explica casos de uso del hook `useEffect`",
        "explanation": "Podemos usar el hook `useEffect` de diferentes formas, tales como:\n\n- Ejecutar c√≥digo cuando se renderiza el componente, cuando cambian las dependencias del efecto o cuando se desmonta el componente.\n- Por eso puede ser √∫til para hacer llamadas a APIs, ya que sea nada m√°s montar el componente o cuando cambian las dependencias.\n- Realizar tracking de eventos, como Google Analytics, para saber qu√© p√°ginas visitan los usuarios.\n- Podemos validar un formulario para que cada vez que cambie el estado, podamos actualizar la UI y mostrar d√≥nde est√°n los errores.\n- Podemos suscribirnos a eventos del navegador, como por ejemplo el evento `resize` para saber cuando el usuario cambia el tama√±o de la ventana.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Podemos usar el hook `useEffect` de diferentes formas, tales como:\n\n- Ejecutar c√≥digo cuando se renderiza el componente, cuando cambian las dependencias del efecto o cuando se desmonta el componente",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "C√≥mo suscribirse a un evento en `useEffect`",
        "explanation": "Dentro de `useEffect` nos podemos suscribir a eventos del navegador, como el evento `resize` para saber cuando el usuario cambia el tama√±o de la ventana. Es importante que nos desuscribamos cuando el componente se desmonte para evitar fugas de memoria. Para ello, tenemos que devolver una funci√≥n dentro del `useEffect` que se ejecutar√° cuando el componente se desmonte.\n\n```jsx\nimport { useEffect } from 'react'\n\nfunction Window() {\n  useEffect(() => {\n    const handleResize = () => {\n      console.log('La ventana se ha redimensionado')\n    }\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [])\n\n  return (\n    <p>Abre la consola y redimensiona la ventana</p>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Dentro de `useEffect` nos podemos suscribir a eventos del navegador, como el evento `resize` para saber cuando el usuario cambia el tama√±o de la ventana",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© hace el hook `useId`?",
        "explanation": "`useId` es un hook para generar identificadores √∫nicos que se pueden pasar a los atributos de las etiquetas HTML y es especialmente √∫til para accesibilidad.\n\nLlama `useId` en el nivel superior del componente para generar una ID √∫nica:\n\n```jsx\nimport { useId } from 'react'\nfunction PasswordField() {\n  const passwordHintId = useId()\n  // ...\n```\n\nA continuaci√≥n, pasa el ID generado a diferentes atributos:\n\n```jsx\n<>\n  <input type=\"password\" aria-describedby={passwordHintId} />\n  <p id={passwordHintId}>\n</>\n```\n\nLa etiqueta `aria-describedby` te permite especificar que dos etiquetas est√°n relacionadas entre s√≠, puede generar una identificaci√≥n √∫nica con useId donde incluso si `PasswordField` aparece varias veces en la pantalla, las identificaciones generadas no chocar√°n.\n\nEl ejemplo completo ser√≠a as√≠:\n\n```jsx\nimport { useId } from 'react'\n\nfunction PasswordField() {\n  const passwordHintId = useId()\n\n  return (\n    <>\n      <label>\n        Password:\n        <input\n          type=\"password\"\n          aria-describedby={passwordHintId}\n        />\n      </label>\n      <p id={passwordHintId}>\n        El password debe ser de 18 letras y contener caracteres especiales\n      </p>\n    </>\n  )\n}\n\nexport default function App() {\n  return (\n    <>\n      <h2>Choose password</h2>\n      <PasswordField />\n      <h2>Confirm password</h2>\n      <PasswordField />\n    </>\n  )\n}\n```\n\nComo ves en `App` estamos usando el componente dos veces. Si pusieramos una id a mano, por ejemplo `password`, entonces la ID no ser√≠a √∫nica y quedar√≠a duplicada. Por eso es importante que generes la ID autom√°ticamente con `useId`.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "`useId` es un hook para generar identificadores √∫nicos que se pueden pasar a los atributos de las etiquetas HTML y es especialmente √∫til para accesibilidad",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo podemos ejecutar c√≥digo cuando el componente se monta?",
        "explanation": "Podemos ejecutar c√≥digo cuando el componente se monta usando el hook `useEffect` sin pasarle ninguna dependencia. En este caso, la funci√≥n que se pasa como primer par√°metro se ejecutar√° cuando el componente se monte.\n\n```jsx\nimport { useEffect } from 'react'\n\nfunction Component() {\n  useEffect(() => {\n    console.log('El componente se ha montado')\n  }, [])\n\n  return (\n    <p>Abre la consola y re-dimensiona la ventana</p>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Podemos ejecutar c√≥digo cuando el componente se monta usando el hook `useEffect` sin pasarle ninguna dependencia",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son los Fragments en React?",
        "explanation": "Los *Fragments* son una forma de agrupar elementos sin a√±adir un elemento extra al DOM, ya que React no permite devolver varios elementos en un componente, solo un elemento ra√≠z.\n\nPara crear un Fragment en React usamos el componente `Fragment`:\n\n```jsx\nimport { Fragment } from 'react'\n\nfunction App() {\n  return (\n    <Fragment>\n      <h1>Titulo</h1>\n      <p>P√°rrafo</p>\n    </Fragment>\n  )\n}\n```\n\nTambi√©n podemos usar la sintaxis de abreviatura:\n\n```jsx\nfunction App() {\n  return (\n    <>\n      <h1>Titulo</h1>\n      <p>P√°rrafo</p>\n    </>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los *Fragments* son una forma de agrupar elementos sin a√±adir un elemento extra al DOM, ya que React no permite devolver varios elementos en un componente, solo un elemento ra√≠z",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPor qu√© es recomendable usar Fragment en vez de un div?",
        "explanation": "Las razones por las que es recomendable usar Fragment en vez de un `div` a la hora de envolver varios elementos son:\n\n- Los `div` a√±aden un elemento extra al DOM, mientras que los Fragments no. Esto hace que el n√∫mero de elementos HTML y la profundidad del DOM sea menor.\n- Los elementos envueltos con Fragment son afectados directamente por las propiedades *flex* o *grid* de CSS de su elemento padre. Si usas un `div` es posible que tengas problemas con el alineamiento de los elementos.\n- Los Fragments son m√°s r√°pidos que los `div` ya que no tienen que ser renderizados.\n- Los `div` aplican CSS por defecto (hace que lo que envuelve el `div` se comporte como un bloque al aplicar un `display: block`) mientras que los Fragment no aplican ning√∫n estilo por defecto.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Las razones por las que es recomendable usar Fragment en vez de un `div` a la hora de envolver varios elementos son:\n\n- Los `div` a√±aden un elemento extra al DOM, mientras que los Fragments no",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el Compound Components Pattern?",
        "explanation": "Es un patr√≥n de dise√±o de componentes que se basa en crear un componente padre con un solo objetivo, proporcionarle a sus hijos las propiedades necesarias para que se rendericen sin problemas.\n\nPermite una estructura declarativa a la hora de construir nuevos componentes, adem√°s ayuda a la lectura del c√≥digo por su simplicidad y limpieza.\n\nUn ejemplo de este dise√±o ser√≠a una lista que renderiza los elementos hijos:\n\n```jsx\n<List>\n  <ListItem>Cat</ListItem>\n  <ListItem>Dog</ListItem>\n</List>\n```\n\n```jsx\nconst List = ({ children, ...props }) => (\n  <ul {...props} >\n    {children}\n  </ul>\n);\n\nconst ListItem = ({ children, ...props }) => {\n\n  return (\n    <li {...props}>\n      {children}\n    </li>\n  );\n};\n\nexport { List, ListItem };\n```\n\nEste es un ejemplo sencillo, pero los componentes pueden ser tan complejos como quieras y tanto el padre como los hijos pueden tener sus propios estados.\n\nEnlaces de inter√©s:\n\n- [Lleva tu React al siguiente nivel con Compound Pattern by dezkareid en el blog de Platzi](https://platzi.com/blog/lleva-tu-react-al-siguiente-nivel-con-compound-pattern/?utm_source=twitter&utm_medium=organic&utm_campaign=PLA_TW_BLOG_202205_react_compound_pattern)\n\n- [Compound Components by Jenna Smith](https://jjenzz.com/compound-components) <strong>en ingl√©s</strong>\n- [Compound Components Lesson by Kent C. Dodds](https://egghead.io/lessons/react-write-compound-components) <strong>en ingl√©s</strong>\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Es un patr√≥n de dise√±o de componentes que se basa en crear un componente padre con un solo objetivo, proporcionarle a sus hijos las propiedades necesarias para que se rendericen sin problemas",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes inicializar un proyecto de React desde cero?",
        "explanation": "Existen diversas formas de inicializar un proyecto de React desde cero. Entre las m√°s populares est√°n:\n\n- [Vite](https://vitejs.dev/guide/#scaffolding-your-first-vite-project)\n\n```bash\nnpm create vite@latest my-app -- --template react\n```\n\n- [Create React App](https://create-react-app.dev/docs/getting-started)\n\n```bash\nnpx create-react-app my-app\n```\n\n> La opci√≥n m√°s popular y recomendada hoy en d√≠a es Vite. <small>Fuente [npm trends](https://npmtrends.com/@vitejs/plugin-react-vs-create-react-app).</small>\n\nUsando un Framework, entre las m√°s populares est√°n:\n\n- [Nextjs](https://nextjs.org/docs/getting-started)\n\n```bash\nnpx create-next-app@latest my-app\n```\n\n- [Gatsby](https://www.gatsbyjs.com/docs/quick-start/)\n\n```bash\nnpm init gatsby\n```\n\n> La opci√≥n m√°s popular y recomendada hoy en d√≠a es Nextjs. <small>Fuente [npm trends](https://npmtrends.com/gatsby-vs-next)</small>\n\nCada uno de ellos es un empaquetador de aplicaciones web. Se encargan de resolver las dependencias de tu proyecto, levantar un entorno de desarrollo que se refresca autom√°ticamente con cada cambio y de empaquetar tu aplicaci√≥n para producci√≥n con todos los archivos est√°ticos necesarios y mucho m√°s.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Existen diversas formas de inicializar un proyecto de React desde cero",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es React DOM?",
        "explanation": "React DOM es la librer√≠a que se encarga de renderizar los componentes de React para el navegador. Hay que tener en cuenta que React es una biblioteca que se puede usar en diferentes entornos (dispositivos m√≥viles, apps de escritorio, terminal...).\n\nMientras que la biblioteca de *React*, a secas, es el motor de creaci√≥n de componentes, hooks, sistema de props y estado... *React DOM* es la librer√≠a que se encarga de renderizar los componentes de React espec√≠ficamente en el navegador.\n\n*React Native*, por ejemplo, har√≠a lo mismo, pero para dispositivos m√≥viles.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "React DOM es la librer√≠a que se encarga de renderizar los componentes de React para el navegador",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© JavaScript necesito para aprender React?",
        "explanation": "##### JavaScript que necesitas para aprender React\n\n**Para aprender y dominar React necesitas saber JavaScript.** A diferencia de otros frameworks y bibliotecas, como *Angular* y *Vue*, que se basan en su propio *DSL* (Domain-Specific Language), React usa una extensi√≥n de la sintaxis de JavaScript llamada *JSX*. M√°s adelante lo veremos en detalle pero, al final, no deja de ser az√∫car sint√°ctico para escribir menos JavaScript.\n\n**En React todo es JavaScript.** Para bien y para mal. Este libro da por sentados unos conocimientos previos del lenguaje de programaci√≥n pero antes de empezar vamos a hacer un peque√±o repaso por algunas de las caracter√≠sticas m√°s importantes que necesitar√°s conocer.\n\n**Si ya dominas JavaScript puedes saltarte este cap√≠tulo** y continuar con el libro, pero recuerda que siempre podr√°s revisar este cap√≠tulo como referencia.\n\n##### EcmaScript Modules o ESModules\n\nLos **EcmaScript Modules** es la forma nativa que tiene JavaScript para importar y exportar variables, funciones y clases entre diferentes ficheros. Hoy en d√≠a, especialmente si trabajamos con un empaquetador de aplicaciones como Webpack, vamos a estar trabajando constantemente con esta sintaxis.\n\nPor un lado podemos crear m√≥dulos export√°ndolos por defecto:\n\n```js\n// sayHi.js\n// exportamos por defecto el m√≥dulo sayHi\nexport default sayHi (message) {\n    console.log(message)\n}\n\n// index.js\n// este m√≥dulo lo podremos importar con el nombre que queramos\nimport sayHi from './sayHi.js'\n\n// al ser el m√≥dulo exportado por defecto podr√≠amos usar otro nombre\nimport miduHi from './sayHi.js'\n```\n\nTambi√©n podemos hacer exportaciones nombradas de m√≥dulos, de forma que un m√≥dulo tiene un nombre asignado y para importarlo necesitamos usar exactamente el nombre usado al exportarlo:\n\n```js\n// sayHi.js\n// podemos usar exportaciones nombradas para mejorar esto\nexport const sayHi = (message) => console.log(message)\n\n// y se pueden hacer tantas exportaciones de m√≥dulos nombrados como queramos\nexport const anotherHi = msg => alert(msg)\n\n// index.js\n// ahora para importar estos m√≥dulos en otro archivo podr√≠amos hacerlo as√≠\nimport {sayHi, anotherHi} from './sayHi.js'\n```\n\nLos *imports* que hemos visto hasta aqu√≠ se conocen como *imports est√°ticos*. Esto significa que ese m√≥dulo ser√° cargado en el momento de la carga del archivo que lo importa.\n\nTambi√©n existen los *imports din√°micos*, de forma que podamos importar m√≥dulos que se carguen en el momento de la ejecuci√≥n del programa o cuando nosotros decidamos (por ejemplo, como respuesta a un click).\n\n```js\ndocument.querySelector('button').addEventListener('click', () => {\n  // los imports din√°micos devuelven una Promesa\n  import('./sayHi.js').then(module => {\n    // ahora podemos ejecutar el m√≥dulo que hemos cargado\n    module.default('Hola')\n  })\n})\n```\n\nLos imports din√°micos son √∫tiles tambi√©n cuando trabajamos con empaquetadores como Webpack o Vite, ya que esto crear√° unos *chunks* (fragmentos) que se cargar√°n fuera del bundle general. ¬øEl objetivo? Mejorar el rendimiento de la aplicaci√≥n.\n\nExisten m√°s sintaxis para trabajar con m√≥dulos, pero con saber las que hemos visto ya ser√≠a suficiente para seguir el libro.\n\n**¬øPor qu√© es importante?**\n\nPara empezar React te ofrece diferentes partes de su biblioteca a trav√©s de m√≥dulos que podr√°s importar. Adem√°s nuestros componentes los tendremos separados en ficheros y, cada uno de ellos, se podr√° importar utilizando *ESModules*.\n\nAdem√°s, por temas de optimizaci√≥n de rendimiento, podremos importar de forma din√°mica componentes y as√≠ mejorar la experiencia de nuestros usuarios al necesitar cargar menos informaci√≥n para poder utilizar la p√°gina.\n\n##### Operador condicional (ternario)\n\nLas ternarias son una forma de realizar condiciones sin la necesidad de usar la sintaxis con `if`. Se podr√≠a decir que es una forma de atajo para evitar escribir tanto c√≥digo.\n\n```js\nif (number % 2 === 0) {\n  console.log('Es par')\n} else {\n  console.log('Es impar')\n}\n\n// usando ternaria\nnumber % 2 === 0 ? console.log('Es par') : console.log('Es impar')\n```\n\n**¬øPor qu√© es importante?**\n\nEn las interfaces gr√°ficas es muy normal que, dependiendo del estado de la aplicaci√≥n o los datos que nos lleguen, vamos a querer renderizar una cosa u otra en pantalla. Para realizar esto, en lugar de utilizar `if` se usan las ternarias ya que queda mucho m√°s legible dentro del *JSX*.\n\n##### Funciones flecha o Arrow Functions\n\nLas *funciones flecha* o *arrow function* fueron a√±adidas a JavaScript en el est√°ndar ECMAScript 6 (o ES2015). En principio parece que simplemente se trata de una sintaxis alternativa m√°s simple a la hora de crear expresiones de funciones:\n\n```js\nconst nombreDeLaFuncion = function (param1, param2) {\n  // instrucciones de la funci√≥n\n}\n\nconst nombreDeLaFuncion = (param1, param2) => { // con arrow function\n  // instrucciones de la funci√≥n\n}\n```\n\nPero adem√°s del cambio de sintaxis existen otras caracter√≠sticas de las funciones flechas que se usan constantemente en React.\n\n```js\n// return impl√≠cito al escribir una sola l√≠nea\nconst getName = () => 'midudev'\n\n// ahorro de parent√©sis para funci√≥n de un par√°metro\nconst duplicateNumber = num => num * 2\n\n// se usan mucho como callback en funciones de arrays\nconst numbers = [2, 4, 6]\nconst newNumbers = numbers.map(n => n / 2)\nconsole.log(newNumbers) // [1, 2, 3]\n```\n\nTambi√©n tiene algunos cambios respecto al valor de `this` pero, aunque es aconsejable dominarlo, no es realmente necesario para poder seguir con garant√≠as el libro.\n\n**¬øPor qu√© es importante?**\n\nAunque hace unos a√±os con React se trabajaba principalmente con clases, desde la irrupci√≥n de los hooks en la versi√≥n 16.8 ya no se usan mucho. Esto hace que se usen mucho m√°s funciones.\n\nLas funciones flecha, adem√°s, puedes verlas f√°cilmente conviviendo dentro de tus componentes. Por ejemplo, a la hora de renderizar una lista de elementos ejecutar√°s el m√©todo `.map` del array y, como callback, seguramente usar√°s una funci√≥n flecha an√≥nima.\n\n##### Par√°metros predeterminados (default values)\n\nEn JavaScript puedes proporcionar valores por defecto a los par√°metros de una funci√≥n en caso que no se le pase ning√∫n argumento.\n\n```js\n// al par√°metro b le damos un valor por defecto de 1\nfunction multiply(a, b = 1) {\n  return a * b;\n}\n\n// si le pasamos un argumento con valor, se ignora el valor por defecto\nconsole.log(multiply(5, 2)) // 10\n\n// si no le pasamos un argumento, se usa el valor por defecto\nconsole.log(multiply(5)) // 5\n\n// las funciones flecha tambi√©n pueden usarlos\nconst sayHi = (msg = 'Hola React!') => console.log(msg)\nsayHi() // 'Hola React!'\n```\n\n**¬øPor qu√© es importante?**\n\nEn React existen dos conceptos muy importantes: **componentes y hooks**. No vamos a entrar en detalle ahora en ellos pero lo importante es que ambos son construidos con funciones.\n\nPoder a√±adir valores por defecto a los par√°metros de esas funciones en el caso que no venga ning√∫n argumento **es clave** para poder controlar React con √©xito.\n\nLos componentes, por ejemplo, pueden no recibir par√°metros y, pese a ello, seguramente vas a querer que tengan alg√∫n comportamiento por defecto. Lo podr√°s conseguir de esta forma.\n\n##### Template Literals\n\nLos template literals o plantillas de cadenas llevan las cadenas de texto al siguiente nivel permitiendo expresiones incrustadas en ellas.\n\n```js\nconst inicio = 'Hola'\nconst final = 'React'\n\n// usando una concatenaci√≥n normal ser√≠a\nconst mensaje = inicio + \" \" + final\n\n// con los template literals podemos evaluar expresiones\nconst mensaje = `${inicio} ${final}`\n```\n\nComo ves, para poder usar los template literals, necesitas usar el s√≠mbolo ```\n\nAdem√°s, nos permiten utilizar cadenas de texto de m√°s de una l√≠nea.\n\n**¬øPor qu√© es importante?**\n\nEn React esto se puede utilizar para diferentes cosas. No s√≥lo es normal crear cadenas de texto para mostrar en la interfaz... tambi√©n puede ser √∫til para crear clases para tus elementos HTML de forma din√°mica. Ver√°s que los template literales est√°n en todas partes.\n\n##### Propiedades abreviadas\n\nDesde *ECMAScript 2015* se puede iniciar un objeto utilizado nombre de propiedades abreviadas. Esto es que si quieres utilizar como valor una variable que tiene el mismo nombre que la key, entonces puedes indicar la inicializaci√≥n una vez:\n\n```js\nconst name = 'Miguel'\nconst age = 36\nconst book = 'React'\n\n// antes har√≠amos esto\nconst persona = { name: name, age: age, book: book }\n\n// ahora podemos hacer esto, sin repetir\nconst persona = { name, age, book }\n```\n\n**¬øPor qu√© es importante?**\n\nEn React se trata muchas veces con objetos y siempre vamos a querer escribir el menor n√∫mero de l√≠neas posible para mantener nuestro c√≥digo f√°cil de mantener y entender.\n\n##### La desestructuraci√≥n\n\nLa sintaxis de *desestructuraci√≥n* es una expresi√≥n de JavaScript que permite extraer valores de Arrays o propiedades de objetos en distintas variables.\n\n```js\n// antes\nconst array = [1, 2, 3]\nconst primerNumero = array[0]\nconst segundoNumero = array[1]\n\n// ahora\nconst [primerNumero, segundoNumero] = array\n\n// antes con objetos\nconst persona = { name: 'Miguel', age: 36, book: 'React' }\nconst name = persona.name\nconst age = persona.age\n\n// ahora con objetos\nconst {age, name} = persona\n\n// tambi√©n podemos a√±adir valores por defecto\nconst {books = 2} = persona\nconsole.log(persona.books) // -> 2\n\n// tambi√©n funciona en funciones\nconst getName = ({name}) => `El nombre es ${name}`\ngetName(persona)\n```\n\n**¬øPor qu√© es importante?**\n\nEn React hay mucho c√≥digo b√°sico que da por sentado que conoces y dominas esta sintaxis. Piensa que los objetos y los arreglos son tipos de datos que son perfectos para guardar datos a representar en una interfaz. As√≠ que poder tratarlos f√°cilmente te va a hacer la vida mucho m√°s f√°cil.\n\n##### M√©todos de Array\n\nSaber manipular arreglos en JavaScript es b√°sico para considerar que se domina. Cada m√©todo realiza una operaci√≥n en concreto y devuelve diferentes tipos de datos. Todos los m√©todos que veremos reciben un callback (funci√≥n) que se ejecutar√° para cada uno de los elementos del array.\n\nVamos a revisar algunos de los m√©todos m√°s usados:\n\n```js\n// tenemos este array con diferentes elementos\nconst networks = [\n  {\n    id: 'youtube',\n    url: 'https://midu.tube',\n    needsUpdate: true\n  },\n  {\n    id: 'twitter',\n    url: 'https://twitter.com/midudev',\n    needsUpdate: true\n  },\n  {\n    id: 'instagram',\n    url: 'https://instagram.com/midu.dev',\n    needsUpdate: false\n  }\n]\n\n// con .map podemos transformar cada elemento\n// y devolver un nuevo array\nnetworks.map(singleNetwork => singleNetwork.url)\n// Resultado:\n  [\n    'https://midu.tube',\n    'https://twitter.com/midudev',\n    'https://instagram.com/midu.dev'\n  ]\n\n// con .filter podemos filtrar elementos de un array que no\n// pasen una condici√≥n determinada por la funci√≥n que se le pasa.\n// Devuelve un nuevo array.\nnetworks.filter(singleNetwork => singleNetwork.needsUpdate === true)\n// Resultado:\n[\n  { id: 'youtube', url: 'https://midu.tube', needsUpdate: true },\n  { id: 'twitter', url: 'https://twitter.com/midudev', needsUpdate: true }\n]\n\n// con .find podemos buscar un elemento de un array que\n// cumpla la condici√≥n definida en el callback\nnetworks.find(singleNetwork => singleNetwork.id === 'youtube')\n// Resultado:\n{ id: 'youtube', url: 'https://midu.tube', needsUpdate: true }\n\n// con .some podemos revisar si alg√∫n elemento del array cumple una condici√≥n\nnetworks.some(singleNetwork => singleNetwork.id === 'tiktok') // false\nnetworks.some(singleNetwork => singleNetwork.id === 'instagram') // true\n```\n\n**¬øPor qu√© es importante?**\n\nEn React es muy normal almacenar los datos que tenemos que representar en la UI como array. Esto hace que muchas veces necesitemos tratarlos, filtrarlos o extraer informaci√≥n de ellos. Es primordial entender, conocer y dominar al menos estos m√©todos, ya que son los m√°s usados.\n\n##### Sintaxis Spread\n\nLa sintaxis de spread nos permite expandir un iterable o un objeto en otro lugar d√≥nde se espere esa informaci√≥n. Para poder utilizarlo, necesitamos utilizar los tres puntos suspensivos `...` justo antes.\n\n```js\nconst networks = ['Twitter', 'Twitch', 'Instagram']\nconst newNetwork = 'Tik Tok'\n// creamos un nuevo array expandiendo el array networks y\n// colocando al final el elemento newNetwork\n// utilizando la sintaxis de spread\nconst allNetworks = [...networks, newNetwork]\nconsole.log(allNetworks)\n// -> [ 'Twitter', 'Twitch', 'Instagram', 'Tik Tok' ]\n```\n\nEsto mismo lo podemos conseguir con un objeto, de forma que podemos expandir todas sus propiedades en otro objeto de forma muy sencilla.\n\n```js\nconst midu = { name: 'Miguel', twitter: '@midudev' }\nconst miduWithNewInfo = {\n  ...midu,\n  youtube: 'https://youtube.com/midudev',\n  books: ['Aprende React']\n}\nconsole.log(miduWithNewInfo)\n// {\n//   name: 'Miguel',\n//   twitter: '@midudev',\n//   youtube: 'https://youtube.com/midudev',\n//   books: [ 'Aprende React' ]\n// }\n```\n\nEs importante notar que esto hace una copia, s√≠, pero superficial. Si tuvi√©ramos objetos anidados dentro del objeto entonces deber√≠amos tener en cuenta que podr√≠amos mutar la referencia. Veamos un ejemplo.\n\n```js\nconst midu = {\n  name: 'Miguel',\n  twitter: '@midudev',\n  experience: {\n    years: 18,\n    focus: 'javascript'\n  }\n}\n\nconst miduWithNewInfo = {\n  ...midu,\n  youtube: 'https://youtube.com/midudev',\n  books: ['Aprende React']\n}\n\n// cambiamos un par de propiedades de la \"copia\" del objeto\nmiduWithNewInfo.name = 'Miguel √Ångel'\nmiduWithNewInfo.experience.years = 19\n\n// hacemos un console.log del objeto inicial\nconsole.log(midu)\n\n// en la consola veremos que el nombre no se ha modificado\n// en el objeto original pero los a√±os de experiencia s√≠\n// ya que hemos mutado la referencia original\n// {\n//   name: 'Miguel',\n//   twitter: '@midudev',\n//   experience: { years: 19, focus: 'javascript' }\n// }\n```\n\n**¬øPor qu√© es importante?**\n\nEn React es muy normal tener que a√±adir nuevos elementos a un array o crear nuevos objetos sin necesidad de mutarlos. El operador Rest nos puede ayudar a conseguir esto. Si no conoces bien el concepto de valor y referencia en JavaScript, ser√≠a conveniente que lo repases.\n\n##### Operador Rest\n\nLa sintaxis `...` hace tiempo que funciona en JavaScript en los par√°metros de una funci√≥n. A esta t√©cnica se le llamaba *par√°metros rest* y nos permit√≠a tener un n√∫mero indefinido de argumentos en una funci√≥n y poder acceder a ellos despu√©s como un array.\n\n```js\nfunction suma(...allArguments) {\n  return allArguments.reduce((previous, current) => {\n    return previous + current\n  })\n}\n```\n\nAhora el operador rest tambi√©n se puede utilizar para agrupar el resto de propiedades un objeto o iterable. Esto puede ser √∫til para extraer un elemento en concreto del objeto o el iterable y crear una copia superficial del resto en una nueva variable.\n\n```js\nconst midu = {\n  name: 'Miguel',\n  twitter: '@midudev',\n  experience: {\n    years: 18,\n    focus: 'javascript'\n  }\n}\n\nconst {name, ...restOfMidu} = midu\n\nconsole.log(restOfMidu)\n// -> {\n//   twitter: '@midudev',\n//   experience: {\n//     years: 18,\n//     focus: 'javascript'\n//   }\n// }\n```\n\nTambi√©n podr√≠a funcionar con arrays:\n\n```js\nconst [firstNumber, ...restOfNumbers] = [1, 2, 3]\nconsole.log(firstNumber) // -> 1\nconsole.log(restOfNumbers) // -> [2, 3]\n```\n\n**¬øPor qu√© es importante?**\n\nEs una forma interesante de *eliminar* (de forma figurada) una propiedad de un objeto y creando una copia superficial del resto de propiedades. A veces puede ser interesante para extraer la informaci√≥n que queremos de unos par√°metros y dejar el resto en un objeto que pasaremos hacia otro nivel.\n\n##### Encadenamiento opcional (Optional Chaining)\n\nEl operador de encadenamiento opcional `?.` te permite leer con seguridad el valor de una propiedad que est√° anidada dentro de diferentes niveles de un objeto.\n\nDe esta forma, en lugar de revisar si las propiedades existen para poder acceder a ellas, lo que hacemos es usar el encadenamiento opcional.\n\n```js\nconst author = {\n  name: 'Miguel',\n  libro: {\n    name: 'Aprendiendo React'\n  },\n  writeBook() {\n    return 'Writing!'\n  }\n};\n\n// sin optional chaining\n(author === null || author === undefined)\n    ? undefined\n    : (author.libro === null || author.libro === undefined)\n    ? undefined\n    : author.libro.name \n\n// con optional chaining\nauthor?.libro?.name\n```\n\n**¬øPor qu√© es importante?**\n\nUn objeto es una estructura de datos que es perfecta a la hora de representar muchos elementos de la UI. ¬øTienes un art√≠culo? Toda la informaci√≥n de un art√≠culo seguramente la tendr√°s representada en un objeto.\n\nConforme tu UI sea m√°s grande y compleja, estos objetos tendr√°n m√°s informaci√≥n y necesitar√°s dominar el encadenamiento opcional `?.` para poder acceder a su informaci√≥n con garant√≠as.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---\n\n### Intermedio",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "##### JavaScript que necesitas para aprender React\n\n**Para aprender y dominar React necesitas saber JavaScript",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo crear un hook personalizado (*custom hook*)?",
        "explanation": "Un hook personalizado es una funci√≥n que empieza con la palabra `use` y que puede utilizar otros hooks. Son ideales para reutilizar l√≥gica en diferentes componentes. Por ejemplo, podemos crear un hook personalizado para extraer la gesti√≥n del estado de un contador:\n\n```js\n// ./hooks/useCounter.js\n\nexport function useCounter() {\n  const [count, setCount] = useState(0)\n\n  const increment = () => setCount(count + 1)\n  const decrement = () => setCount(count - 1)\n\n  return { count, increment, decrement }\n}\n```\n\nPara usarlo en un componente:\n\n```js\nimport { useCounter } from './hooks/useCounter.js'\n\nfunction Counter() {\n  const { count, increment, decrement } = useCounter()\n\n  return (\n    <>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button onClick={increment}>+</button>\n    </>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Un hook personalizado es una funci√≥n que empieza con la palabra `use` y que puede utilizar otros hooks",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øCu√°ntos `useEffect` puede tener un componente?",
        "explanation": "Aunque normalmente los componentes de React solo cuentan con un `useEffect` lo cierto es que podemos tener tantos `useEffect` como queramos en un componente. Cada uno de ellos se ejecutar√° cuando se renderice el componente o cuando cambien las dependencias del efecto.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Aunque normalmente los componentes de React solo cuentan con un `useEffect` lo cierto es que podemos tener tantos `useEffect` como queramos en un componente",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo podemos ejecutar c√≥digo cuando el componente se desmonta del √°rbol?",
        "explanation": "Podemos ejecutar c√≥digo cuando el componente se desmonta usando el hook `useEffect` y dentro devolver una funci√≥n con el c√≥digo que queremos ejecutar. En este caso, la funci√≥n que se pasa como primer par√°metro del `useEffect` se ejecutar√° cuando el componente se monte, y la funci√≥n que es retornada se ejecutar√° cuando se desmonte.\n\n```jsx\nimport { useEffect } from 'react'\n\nfunction Component() {\n  useEffect(() => {\n    console.log('El componente se ha montado')\n\n    return () => {\n      console.log('El componente se ha desmontado')\n    }\n  }, [])\n\n  return <h1>Ejemplo</h1>\n}\n```\n\nEsto es muy √∫til para limpiar recursos que se hayan creado en el componente, como por ejemplo, eventos del navegador o para cancelar peticiones a APIs.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Podemos ejecutar c√≥digo cuando el componente se desmonta usando el hook `useEffect` y dentro devolver una funci√≥n con el c√≥digo que queremos ejecutar",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "C√≥mo puedes cancelar una petici√≥n a una API en `useEffect` correctamente",
        "explanation": "Cuando hacemos una petici√≥n a una API, podemos cancelarla para evitar que se ejecute cuando el componente se desmonte usando `AbortController` como hacemos en este ejemplo:\n\n```jsx\nuseEffect(() => {\n  // Creamos el controlador para abortar la petici√≥n\n  const controller = new AbortController()\n  // Recuperamos la se√±al del controlador\n  const { signal } = controller\n  // Hacemos la petici√≥n a la API y le pasamos como options la se√±al\n  fetch('https://jsonplaceholder.typicode.com/posts/1', { signal })\n    .then(res => res.json())\n    .then(json => setMessage(json.title))\n    .catch(error => {\n      // Si hemos cancelado la petici√≥n, la promesa se rechaza\n      // con un error de tipo AbortError\n      if (error.name !== 'AbortError') {\n        console.error(error.message)\n      }\n    })\n\n  // Si se desmonta el componente, abortamos la petici√≥n\n  return () => controller.abort()\n}, [])\n```\n\nEsto tambi√©n funciona con `axios`:\n\n```jsx\nuseEffect(() => {\n  // Creamos el controlador para abortar la petici√≥n\n  const controller = new AbortController()\n  // Recuperamos la se√±al del controlador\n  const { signal } = controller\n  // Hacemos la petici√≥n a la API y le pasamos como options la se√±al\n  axios\n    .get('https://jsonplaceholder.typicode.com/posts/1', { signal })\n    .then(res => setMessage(res.data.title))\n    .catch(error => {\n      // Si hemos cancelado la petici√≥n, la promesa se rechaza\n      // con un error de tipo AbortError\n      if (error.name !== 'AbortError') {\n        console.error(error.message)\n      }\n    })\n\n  // Si se desmonta el componente, abortamos la petici√≥n\n  return () => controller.abort()\n}, [])\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Cuando hacemos una petici√≥n a una API, podemos cancelarla para evitar que se ejecute cuando el componente se desmonte usando `AbortController` como hacemos en este ejemplo:\n\n```jsx\nuseEffect(() => {\n  // Creamos el controlador para abortar la petici√≥n\n  const controller = new AbortController()\n  // Recuperamos la se√±al del controlador\n  const { signal } = controller\n  // Hacemos la petici√≥n a la API y le pasamos como options la se√±al\n  fetch('https://jsonplaceholder",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øCu√°les son las reglas de los hooks en React?",
        "explanation": "Los hooks en React tienen dos reglas fundamentales:\n\n- Los hooks solo se pueden usar en componentes funcionales o *custom hooks*.\n- Los hooks solo se pueden llamar en el nivel superior de un componente. No se pueden llamar dentro de bucles, condicionales o funciones anidadas.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los hooks en React tienen dos reglas fundamentales:\n\n- Los hooks solo se pueden usar en componentes funcionales o *custom hooks*",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© diferencia hay entre `useEffect` y `useLayoutEffect`?",
        "explanation": "Aunque ambos son muy parecidos, tienen una peque√±a diferencia en el momento en el que se ejecutan.\n\n`useLayoutEffect` se ejecuta de forma s√≠ncrona inmediatamente despu√©s que React haya actualizado completamente el DOM tras el renderizado. Puede ser √∫til si necesitas recuperar un elemento del DOM y acceder a sus dimensiones o posici√≥n en pantalla.\n\n`useEffect` se ejecuta de forma as√≠ncrona tras el renderizado, pero no asegura que el DOM se haya actualizado. Es decir, si necesitas recuperar un elemento del DOM y acceder a sus dimensiones o posici√≥n en pantalla, no podr√°s hacerlo con `useEffect` porque no tienes la garant√≠a de que el DOM se haya actualizado.\n\nNormalmente, el 99% de las veces, vas a querer utilizar `useEffect` y, adem√°s, tiene mejor rendimiento, ya que no bloquea el renderizado.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Aunque ambos son muy parecidos, tienen una peque√±a diferencia en el momento en el que se ejecutan",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son mejores los componentes de clase o los componentes funcionales?",
        "explanation": "Desde que en *React 16.8.0* se incluyeron los hooks, los componentes de funciones pueden hacer casi todo lo que los componentes de clase.\n\nAunque no hay una respuesta clara a esta pregunta, normalmente los componentes funcionales son m√°s sencillos de leer y escribir y pueden tener un mejor rendimiento en general.\n\nAdem√°s, **los hooks solo se pueden usar en los componentes funcionales**. Esto es importante, ya que con la creaci√≥n de custom hooks podemos reutilizar la l√≥gica y podr√≠a simplificar nuestros componentes.\n\nPor otro lado, los componentes de clase nos permiten usar el ciclo de vida de los componentes, algo que no podemos hacer con los componentes funcionales donde solo podemos usar `useEffect`.\n\n**Referencias:**\n\n- [Tweet de midudev donde muestra que los componentes funcionales se transpilan mejor que los de clases.](https://twitter.com/midudev/status/1065516163856310272)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Desde que en *React 16",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo mantener los componentes puros y qu√© ventajas tiene?",
        "explanation": "Los componentes puros son aquellos que no tienen estado y que no tienen efectos secundarios. Esto quiere decir que no tienen ning√∫n tipo de l√≥gica que no sea la de renderizar la interfaz.\n\nSon m√°s f√°ciles de testear y de mantener. Adem√°s, son m√°s f√°ciles de entender porque no tienen l√≥gica compleja.\n\nPara crear un componente puro en React usamos una function:\n\n```jsx\nfunction Button({ text }) {\n  return (\n    <button>\n      {text}\n    </button>\n  )\n}\n```\n\nEn este caso, el componente `Button` recibe una prop `text` que es un string. El componente `Button` renderiza un bot√≥n con el texto que recibe en la prop `text`.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los componentes puros son aquellos que no tienen estado y que no tienen efectos secundarios",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es la hidrataci√≥n (hydration) en React?",
        "explanation": "Cuando renderizamos nuestra aplicaci√≥n en el servidor, React genera un HTML est√°tico. Este HTML est√°tico es simplemente un string que contiene el HTML que se va a mostrar en la p√°gina.\n\nCuando el navegador recibe el HTML est√°tico, lo renderiza en la p√°gina. Sin embargo, este HTML est√°tico no tiene interactividad. No tiene eventos, no tiene l√≥gica, no tiene estado, etc. Podr√≠amos decir que *no tiene vida*.\n\nPara hacer que este HTML est√°tico pueda ser interactivo, React necesita que el HTML est√°tico se convierta en un √°rbol de componentes de React. Esto se llama **hidrataci√≥n**.\n\nDe esta forma, en el cliente, React reutiliza este HTML est√°tico y se dedica a adjuntar los eventos a los elementos, ejecutar los efectos que tengamos en los componentes y conciliar el estado de los componentes.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Cuando renderizamos nuestra aplicaci√≥n en el servidor, React genera un HTML est√°tico",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el Server Side Rendering y qu√© ventajas tiene?",
        "explanation": "El *Server Side Rendering* es una t√©cnica que consiste en renderizar el HTML en el servidor y enviarlo al cliente. Esto nos permite que el usuario vea la interfaz de la aplicaci√≥n antes de que se cargue el JavaScript.\n\nEsta t√©cnica nos permite mejorar la experiencia de usuario y mejorar el SEO de nuestra aplicaci√≥n.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El *Server Side Rendering* es una t√©cnica que consiste en renderizar el HTML en el servidor y enviarlo al cliente",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes crear un Server Side Rendering con React desde cero?",
        "explanation": "Para crear un Server Side Rendering con React desde cero podemos usar el paquete `react-dom/server` que nos permite renderizar componentes de React en el servidor.\n\nVeamos un ejemplo de c√≥mo crear un Server Side Rendering con React desde cero con Express:\n\n```jsx\nimport express from 'express'\nimport React from 'react'\nimport { renderToString } from 'react-dom/server'\n\nconst app = express()\n\napp.get('/', (req, res) => {\n  const html = renderToString(<h1>Hola mundo</h1>)\n  res.send(html)\n})\n```\n\nEsto nos devolver√° el HTML de la aplicaci√≥n al acceder a la ruta `/`.\n\n```html\n<h1 data-reactroot=\"\">Hola mundo</h1>\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para crear un Server Side Rendering con React desde cero podemos usar el paquete `react-dom/server` que nos permite renderizar componentes de React en el servidor",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPuedes poner un ejemplo de efectos colaterales en React?",
        "explanation": "Igual que las funciones en JavaScript, los componentes de React tambi√©n pueden tener *side effects* (efectos colaterales). Un efecto colateral significa que el componente manipula o lee informaci√≥n que no est√° dentro de su √°mbito.\n\nAqu√≠ puedes ver un ejemplo simple de un componente que tiene un efecto colateral. Un componente que lee y modifica una variable que est√° fuera del componente. Esto hace que sea imposible saber qu√© renderizar√° el componente cada vez que se use, ya que no sabemos el valor que tendr√° `count`:\n\n```jsx\nlet count = 0\n\nfunction Counter() {\n  count = count + 1\n\n  return (\n    <p>Contador: {count}</p>\n  )\n}\n\nexport default function Counters() {\n  return (\n    <>\n      <Counter />\n      <Counter />\n      <Counter />\n    </>\n  )\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Igual que las funciones en JavaScript, los componentes de React tambi√©n pueden tener *side effects* (efectos colaterales)",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© diferencia hay entre componentes controlados y no controlados? ¬øQu√© ventajas y desventajas tienen?",
        "explanation": "A la hora de trabajar con formularios en React, tenemos dos tipos de componentes: los componentes controlados y los componentes no controlados.\n\n**Componentes controlados:**\nson aquellos que tienen un estado que controla el valor del componente. Por lo tanto, el valor del componente se actualiza cuando el estado cambia.\n\nLa ventaja de este tipo de componentes es que son m√°s f√°ciles de testear porque no dependen de la interfaz. Tambi√©n nos permiten crear validaciones muy f√°cilmente. La desventaja es que son m√°s complejos de crear y mantener. Adem√°s, pueden tener un peor rendimiento, ya que provocan un re-renderizado cada vez que cambia el valor del input.\n\n**Componentes no controlados:** son aquellos que no tienen un estado que controle el valor del componente. El estado del componente lo controla el navegador de forma interna. Para conocer el valor del componente, tenemos que leer el valor del DOM.\n\nLa ventaja de este tipo de componentes es que se crean de forma muy f√°cil y no tienes que mantener un estado. Adem√°s, el rendimiento es mejor, ya que no tiene que re-renderizarse al cambiar el valor del input. Lo malo es que hay que tratar m√°s con el DOM directamente y crear c√≥digo imperativo.\n\n```js\n// Controlado:\nconst [value, setValue] = useState('')\nconst handleChange = () => setValue(event.target.value)\n\n<input type=\"text\" value={value} onChange={handleChange} />\n\n// No controlado:\n<input type=\"text\" defaultValue=\"foo\" ref={inputRef} />\n// Usamos `inputRef.current.value` para leer el valor del input\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "A la hora de trabajar con formularios en React, tenemos dos tipos de componentes: los componentes controlados y los componentes no controlados",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son los High Order Components (HOC)?",
        "explanation": "Los High Order Components son funciones que reciben un componente como par√°metro y devuelven un componente.\n\n```jsx\nfunction withLayout(Component) {\n  return function(props) {\n    return <main>\n      <section>\n        <Component {...props} />\n      </section>\n    </main>\n  }\n}\n```\n\nEn este caso, la funci√≥n `withLayout` recibe un componente como par√°metro y devuelve un componente. El componente devuelto renderiza el componente que se le pasa como par√°metro dentro de un layout.\n\nEs un patr√≥n que nos permite reutilizar c√≥digo y as√≠ podemos inyectar funcionalidad, estilos o cualquier otra cosa a un componente de forma sencilla.\n\nCon la llegada de los hooks, los HOCs se han vuelto menos populares, pero todav√≠a se usan en algunos casos.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los High Order Components son funciones que reciben un componente como par√°metro y devuelven un componente",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son las render props?",
        "explanation": "Son un patr√≥n de dise√±o de React que nos permite reutilizar c√≥digo entre componentes e inyectar informaci√≥n en el renderizado de los componentes.\n\n```jsx\n<DataProvider render={data => (\n  <h1>Hello {data.target}</h1>\n)}/>\n```\n\nEn este caso, el componente `DataProvider` recibe una funci√≥n `render` como prop. Ah√≠ le indicamos qu√© es lo que debe renderizar usando la informaci√≥n que recibe como par√°metro.\n\nLa implementaci√≥n del `DataProvider` con funciones podr√≠a ser la siguiente:\n\n```jsx\nfunction DataProvider({ render }) {\n  const data = { target: 'world' }\n  return render(data)\n}\n```\n\nTambi√©n se puede encontrar este patr√≥n usando la prop `children` en los componentes.\n\n```jsx\n<DataProvider>\n  {data => (\n    <h1>Hello {data.target}</h1>\n  )}\n</DataProvider>\n```\n\nY la implementaci√≥n ser√≠a similar:\n\n```jsx\nfunction DataProvider({ children }) {\n  const data = { target: 'world' }\n  return children(data)\n}\n```\n\nEste patr√≥n es usado por grandes bibliotecas como `react-router`, `formik` o `react-motion`.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Son un patr√≥n de dise√±o de React que nos permite reutilizar c√≥digo entre componentes e inyectar informaci√≥n en el renderizado de los componentes",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPor qu√© no podemos usar un `if` en el renderizado de un componente?",
        "explanation": "En React, no podemos usar un `if` en el renderizado de un componente porque no es una expresi√≥n v√°lida de JavaScript, es una declaraci√≥n. Las expresiones son aquellas que devuelven un valor y las declaraciones no devuelven ning√∫n valor.\n\nEn JSX solo podemos usar expresiones, por eso usamos ternarias, que s√≠ son expresiones.\n\n```jsx\n// ‚ùå Esto no funciona\nfunction Button({ text }) {\n  return (\n    <button>\n      {if (text) { return text } else { return 'Click' }}\n    </button>\n  )\n}\n// ‚úÖ Esto funciona\nfunction Button({ text }) {\n  return (\n    <button>\n      {text ? text : 'Click'}\n    </button>\n  )\n}\n```\n\nDe la misma forma, tampoco podemos usar `for`, `while` o `switch` dentro del renderizado de un componente.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "En React, no podemos usar un `if` en el renderizado de un componente porque no es una expresi√≥n v√°lida de JavaScript, es una declaraci√≥n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPor qu√© debemos utilizar una funci√≥n para actualizar el estado de React?",
        "explanation": "A la hora de actualizar el estado de React, debemos utilizar la funci√≥n que nos facilita el hook `useState` para actualizar el estado.\n\n```jsx\nconst [count, setCount] = useState(0)\n\nsetCount(count + 1)\n```\n\n¬øPor qu√© es esto necesario? En primer lugar, el estado en React debe ser inmutable. Es decir, no podemos modificar el estado directamente, sino que debemos siempre crear un nuevo valor para el nuevo estado.\n\nEsto nos permite que la integridad de la UI respecto a los datos que renderiza siempre es correcta.\n\nPor otro lado, llamar a una funci√≥n le permite a React saber que el estado ha cambiado y que debe re-renderizar el componente si es necesario. Adem√°s esto lo hace de forma as√≠ncrona, por lo que podemos llamar a `setCount` tantas veces como queramos y React se encargar√° de actualizar el estado cuando lo considere oportuno.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "A la hora de actualizar el estado de React, debemos utilizar la funci√≥n que nos facilita el hook `useState` para actualizar el estado",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el ciclo de vida de un componente en React?",
        "explanation": "En los componentes de clase, el ciclo de vida de un componente se divide en tres fases:\n\n- Montaje: cuando el componente se a√±ade al DOM.\n- Actualizaci√≥n: cuando el componente se actualiza.\n- Desmontaje: cuando el componente se elimina del DOM.\n\nDentro de este ciclo de vida, existe un conjunto de m√©todos que se ejecutan en el componente.\n\nEstos m√©todos se definen en la clase y se ejecutan en el orden que se muestran a continuaci√≥n:\n\n- constructor\n- render\n- componentDidMount\n- componentDidUpdate\n- componentWillUnmount\n\nEn cada uno de estos m√©todos podemos ejecutar c√≥digo que nos permita controlar el comportamiento de nuestro componente.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "En los componentes de clase, el ciclo de vida de un componente se divide en tres fases:\n\n- Montaje: cuando el componente se a√±ade al DOM",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPor qu√© puede ser mala pr√°ctica usar el `index` como key en un listado de React?",
        "explanation": "Cuando renderizamos una lista de elementos, React necesita saber qu√© elementos han cambiado, han sido a√±adidos o eliminados.\n\nPara ello, React necesita una key √∫nica para cada elemento de la lista. Si no le pasamos una key, React usa el √≠ndice del elemento como key.\n\n```jsx\nconst List = () => {\n  const [items, setItems] = useState(['Item 1', 'Item 2', 'Item 3'])\n\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li key={index}>{item}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nEn este caso, React usa el √≠ndice del elemento como `key`. Esto puede ser un problema si la lista se reordena o se eliminan elementos del array, ya que el √≠ndice de los elementos cambia.\n\nEn este caso, React no sabe qu√© elementos han cambiado y puede que se produzcan errores.\n\nUn ejemplo donde se ve el problema:\n\n```jsx\nconst List = () => {\n  const [items, setItems] = useState(['Item 1', 'Item 2', 'Item 3'])\n\n  const handleRemove = (index) => {\n    const newItems = [...items]\n    newItems.splice(index, 1)\n    setItems(newItems)\n  }\n\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li key={index}>\n          {item}\n          <button onClick={() => handleRemove(index)}>Eliminar</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Cuando renderizamos una lista de elementos, React necesita saber qu√© elementos han cambiado, han sido a√±adidos o eliminados",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPara qu√© sirve el hook `useMemo`?",
        "explanation": "El hook `useMemo` es un hook que nos permite memorizar el resultado de una funci√≥n. Esto quiere decir que si la funci√≥n que le pasamos como par√°metro no ha cambiado, no se ejecuta de nuevo y se devuelve el resultado que ya se hab√≠a calculado.\n\n```jsx\nimport { useMemo } from 'react'\n\nfunction Counter({ count }) {\n  const double = useMemo(() => count * 2, [count])\n\n  return (\n    <div>\n      <p>Contador: {count}</p>\n      <p>Doble: {double}</p>\n    </div>\n  )\n}\n```\n\nEn este caso, el componente `Counter` recibe una prop `count` que es un n√∫mero. El componente calcula el doble de ese n√∫mero y lo muestra en pantalla.\n\nEl hook `useMemo` recibe dos par√°metros: una funci√≥n y un array de dependencias. La funci√≥n se ejecuta cuando el componente se renderiza por primera vez y cuando alguna de las dependencias cambia, en este ejemplo la prop `count`.\n\nLa ventaja es que si la prop `count` no cambia, se evita el c√°lculo del doble y se devuelve el valor que ya se hab√≠a calculado previamente.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El hook `useMemo` es un hook que nos permite memorizar el resultado de una funci√≥n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øEs buena idea usar siempre `useMemo` para optimizar nuestros componentes?",
        "explanation": "No. `useMemo` es una herramienta que nos permite optimizar nuestros componentes, pero no es una herramienta m√°gica que nos va a hacer que nuestros componentes sean m√°s r√°pidos. A veces el c√°lculo de un valor es tan r√°pido que no merece la pena memorizarlo. Incluso, en algunos casos, puede ser m√°s lento memorizarlo que calcularlo de nuevo.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "No",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPara qu√© sirve el hook `useCallback`?",
        "explanation": "El hook `useCallback` es un hook que nos permite memorizar una funci√≥n. Esto quiere decir que si la funci√≥n que le pasamos como par√°metro no ha cambiado, no se ejecuta de nuevo y se devuelve la funci√≥n que ya se hab√≠a calculado.\n\n```jsx\nimport { useCallback } from 'react'\n\nfunction Counter({ count, onIncrement }) {\n  const handleIncrement = useCallback(() => {\n    onIncrement(count)\n  }, [count, onIncrement])\n\n  return (\n    <div>\n      <p>Contador: {count}</p>\n      <button onClick={handleIncrement}>Incrementar</button>\n    </div>\n  )\n}\n```\n\nEn este caso, el componente `Counter` recibe una prop `count` que es un n√∫mero y una prop `onIncrement` que es una funci√≥n que se ejecuta cuando se pulsa el bot√≥n.\n\nEl hook `useCallback` recibe dos par√°metros: una funci√≥n y un array de dependencias. La funci√≥n se ejecuta cuando el componente se renderiza por primera vez y cuando alguna de las dependencias cambia, en este ejemplo la prop `count` o la prop `onIncrement`.\n\nLa ventaja es que si la prop `count` o la prop `onIncrement` no cambian, se evita la creaci√≥n de una nueva funci√≥n y se devuelve la funci√≥n que ya se hab√≠a calculado previamente.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El hook `useCallback` es un hook que nos permite memorizar una funci√≥n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øEs buena idea usar siempre `useCallback` para optimizar nuestros componentes?",
        "explanation": "No. `useCallback` es una herramienta que nos permite optimizar nuestros componentes, pero no es una herramienta m√°gica que nos va a hacer que nuestros componentes sean m√°s r√°pidos. A veces la creaci√≥n de una funci√≥n es tan r√°pida que no merece la pena memorizarla. Incluso, en algunos casos, puede ser m√°s lento memorizarla que crearla de nuevo.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "No",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øCu√°l es la diferencia entre `useCallback` y `useMemo`?",
        "explanation": "La diferencia entre `useCallback` y `useMemo` es que `useCallback` memoriza una funci√≥n y `useMemo` memoriza el resultado de una funci√≥n.\n\nEn cualquier caso, en realidad, `useCallback` es una versi√≥n especializada de `useMemo`. De hecho se puede simular la funcionalidad de `useCallback` con `useMemo`:\n\n```js\nconst memoizedCallback = useMemo(() => {\n  return () => {\n    doSomething(a, b)\n  }\n}, [a, b])\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "La diferencia entre `useCallback` y `useMemo` es que `useCallback` memoriza una funci√≥n y `useMemo` memoriza el resultado de una funci√≥n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son las refs en React?",
        "explanation": "Las refs nos permiten crear una referencia a un elemento del DOM o a un valor que se mantendr√° entre renderizados. Se pueden declarar por medio del comando `createRef` o con el hook `useRef`.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Las refs nos permiten crear una referencia a un elemento del DOM o a un valor que se mantendr√° entre renderizados",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo funciona el hook `useRef`?",
        "explanation": "En el siguiente ejemplo vamos a guardar la referencia en el DOM a un elemento `<input>` y vamos a cambiar el foco a ese elemento cuando hacemos clic en el bot√≥n.\n\n```jsx\nimport { useRef } from 'react'\n\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null)\n\n  const onButtonClick = () => {\n    // `current` apunta al elemento inputEl montado\n    inputEl.current.focus()\n  }\n\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  )\n}\n```\n\nCreamos una referencia `inputEl` con `useRef` y la pasamos al elemento `<input>` como prop `ref`. Cuando el componente se monta, la referencia `inputEl` apunta al elemento `<input>` del DOM.\n\nPara acceder al elemento del DOM, usamos la propiedad `current` de la referencia.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "En el siguiente ejemplo vamos a guardar la referencia en el DOM a un elemento `<input>` y vamos a cambiar el foco a ese elemento cuando hacemos clic en el bot√≥n",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© hace el hook `useLayoutEffect`?",
        "explanation": "`useLayoutEffect` funciona igual que el hook `useEffect`, con la excepci√≥n de que este se dispara sincr√≥nicamente despu√©s de leer todas las mutaciones del DOM.\n\nLlama `useLayoutEffect` en el nivel superior del componente.\n\n```jsx\nimport { useLayoutEffect } from 'react';\n\nuseLayoutEffect(() => {\n  return () => {\n  }\n}, []);\n```\n\n`useLayoutEffect` recibe dos argumentos:\n\n- Una funci√≥n callback que define el efecto.\n- Una lista de dependencias.\n\nAunque el `useEffect` es el hook de renderizado m√°s usado, si se necesita que los efectos del DOM muten cambiando la apariencia entre el efecto y el renderizado, entonces es conveniente que uses el `useLayoutEffect`.\n\n##### Orden de ejecuci√≥n del `useLayoutEffect`\n\nEl orden de ejecuci√≥n del `useLayoutEffect`, ya que se ejecuta de forma s√≠ncrona, al momento en que React termina de ejecutar todas las mutaciones, pero antes de renderizarlo en pantalla, es el siguiente:\n\n- El componente se actualiza por alg√∫n cambio de estado, props o el padre se re-renderiza\n- React renderiza el componente\n- Tu efecto es ejecutado\n- La pantalla se actualiza ‚Äúvisualmente‚Äù\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "`useLayoutEffect` funciona igual que el hook `useEffect`, con la excepci√≥n de que este se dispara sincr√≥nicamente despu√©s de leer todas las mutaciones del DOM",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son los componentes *stateless*?",
        "explanation": "Los componentes *stateless* son componentes que no tienen estado. Estos componentes se crean con una `function` y no tienen acceso al estado de la aplicaci√≥n. La ventaja que tienen estos componentes es que hace que sea m√°s f√°cil crear componentes puros (que siempre renderizan lo mismo para unas mismas props).\n\n```jsx\n// Este es un ejemplo de componente stateless\nfunction Button({ text }) {\n  return (\n    <button>\n      {text}\n    </button>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los componentes *stateless* son componentes que no tienen estado",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes prevenir el comportamiento por defecto de un evento en React?",
        "explanation": "Para prevenir el comportamiento por defecto de un evento en React, debemos usar el m√©todo `preventDefault`:\n\n```jsx\nfunction Form({ onSubmit }) {\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    onSubmit()\n  }\n\n  return <form onSubmit={handleSubmit}>\n    <input type=\"text\" />\n    <button type=\"submit\">Enviar</button>\n  </form>\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para prevenir el comportamiento por defecto de un evento en React, debemos usar el m√©todo `preventDefault`:\n\n```jsx\nfunction Form({ onSubmit }) {\n  const handleSubmit = (event) => {\n    event",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el `StrictMode` en React?",
        "explanation": "El `StrictMode` es un componente que nos permite activar algunas comprobaciones de desarrollo en React. Por ejemplo, detecta componentes que se renderizan de forma innecesaria o funcionalidades obsoletas que se est√°n usando.\n\n```jsx\nimport { StrictMode } from 'react'\n\nfunction App() {\n  return (\n    <StrictMode>\n      <Component />\n    </StrictMode>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El `StrictMode` es un componente que nos permite activar algunas comprobaciones de desarrollo en React",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPor qu√© es recomendable exportar los componentes de React de forma nombrada?",
        "explanation": "Los componentes de React se pueden exportar de dos formas:\n\n- Exportaci√≥n por defecto\n- Exportaci√≥n nombrada\n\nPara exportar un componente por defecto, usamos la palabra reservada `default`:\n\n```jsx\n// button.jsx\nexport default function Button() {\n  return <button>Click</button>\n}\n\n// App.jsx\nimport Button from './button.jsx'\n\nfunction App() {\n  return <Button />\n}\n```\n\nLa gran desventaja que tiene la exportaci√≥n por defecto es que a la hora de importarlo puedes usar el nombre que quieras. Y esto trae problemas, ya que puedes no usar siempre el mismo en el proyecto o usar un nombre que no sea correcto con lo que importas.\n\n```jsx\n// button.jsx\nexport default function Button() {\n  return <button>Click</button>\n}\n\n// App.jsx\nimport MyButton from './button.jsx'\n\nfunction App() {\n  return <MyButton />\n}\n\n// Otro.jsx\nimport Button from './button.jsx'\n\nfunction Otro() {\n  return <Button />\n}\n```\n\nLos exports nombrados nos obligan a usar el mismo nombre en todos los archivos y, por tanto, nos aseguramos de que siempre estamos usando el nombre correcto.\n\n```jsx\n// button.jsx\nexport function Button() {\n  return <button>Click</button>\n}\n\n// App.jsx\nimport { Button } from './button.jsx'\n\nfunction App() {\n  return <Button />\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los componentes de React se pueden exportar de dos formas:\n\n- Exportaci√≥n por defecto\n- Exportaci√≥n nombrada\n\nPara exportar un componente por defecto, usamos la palabra reservada `default`:\n\n```jsx\n// button",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes exportar m√∫ltiples componentes de un mismo archivo?",
        "explanation": "Para exportar m√∫ltiples componentes de un mismo archivo, podemos usar la exportaci√≥n nombrada:\n\n```jsx\n// button.jsx\nexport function Button({children}) {\n  return <button>{children}</button>\n}\n\nexport function ButtonSecondary({children}) {\n  return <button class=\"btn-secondary\">{children}</button>\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para exportar m√∫ltiples componentes de un mismo archivo, podemos usar la exportaci√≥n nombrada:\n\n```jsx\n// button",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedo importar de forma din√°mica un componente en React?",
        "explanation": "Para importar de forma din√°mica un componente en React debemos usar la funci√≥n `import()`, el m√©todo `lazy()` de React y el componente `Suspense`.\n\n```jsx\n// App.jsx\nimport { lazy, Suspense } from 'react'\n\nconst Button = lazy(() => import('./button.jsx'))\n\nexport default function App() {\n  return (\n    <Suspense fallback={<div>Cargando bot√≥n...</div>}>\n      <Button />\n    </Suspense>\n  )\n}\n\n// button.jsx\nexport default function Button() {\n  return <button>Bot√≥n cargado din√°micamente</button>\n}\n```\n\nVamos a ver en detalle cada uno de los elementos que hemos usado:\n\nLa funci√≥n `import()` es parte del est√°ndar de ECMAScript y nos permite importar de forma din√°mica un m√≥dulo. Esta funci√≥n devuelve una promesa que se resuelve con el m√≥dulo importado.\n\nEl m√©todo `lazy()` de React nos permite crear un componente que se renderiza de forma diferida. Este m√©todo recibe una funci√≥n que debe devolver una promesa que se resuelve con un componente. En este caso, se resolver√° con el componente que tenemos en el fichero `button.jsx`. Ten en cuenta que el componente que devuelve `lazy()` **debe ser un componente de React y ser exportado por defecto** (`export default`).\n\nEl componente `Suspense` nos permite mostrar un mensaje mientras se est√° cargando el componente. Este componente recibe una prop `fallback` que es el mensaje que se muestra mientras se est√° cargando el componente.\n\n- [C√≥digo de ejemplo](https://stackblitz.com/edit/react-ts-n6zal2?file=App.tsx)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para importar de forma din√°mica un componente en React debemos usar la funci√≥n `import()`, el m√©todo `lazy()` de React y el componente `Suspense`",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øCuando y por qu√© es recomendable importar componentes de forma din√°mica?",
        "explanation": "En React, nuestras aplicaciones est√°n creadas a partir de componentes. Estos componentes se pueden importar de forma **est√°tica o din√°mica**.\n\nLa importaci√≥n de componentes de forma est√°tica es la forma m√°s com√∫n de importar componentes en React. En este caso, los componentes se importan en la parte superior del fichero y se renderizan en el c√≥digo. El problema es que, si siempre lo hacemos as√≠, es bastante probable que estemos cargando componentes que no se van a usar desde el principio.\n\n```jsx\nimport { useState } from 'react'\n// importamos de forma est√°tica el componente de la Modal\nimport { SuperBigModal } from './super-big-modal.jsx'\n\n// mostrar modal si el usuario da click en un bot√≥n\nexport default function App () {\n  const [showModal, setShowModal] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setShowModal(true)}>Mostrar modal</button>\n      {showModal && <SuperBigModal />}\n    </div>\n  )\n}\n```\n\nEste componente `SuperBigModal` se importa de forma est√°tica, por lo que se carga desde el principio. Pero, ¬øqu√© pasa si el usuario no da click en el bot√≥n para mostrar la modal? En este caso, est√° cargando el componente pese a que no lo est√° usando.\n\nSi queremos ofrecer la mejor experiencia a nuestros usuarios, debemos intentar que la aplicaci√≥n cargue lo m√°s r√°pido posible. Por eso, es recomendable importar de forma din√°mica los componentes que no se van a usar desde el principio.\n\n```jsx\nimport { useState, lazy, Suspense } from 'react'\n// importamos de forma din√°mica el componente de la Modal\nconst SuperBigModal = lazy(() => import('./super-big-modal.jsx'))\n\n// mostrar modal si el usuario da click en un bot√≥n\nexport default function App () {\n  const [showModal, setShowModal] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setShowModal(true)}>Mostrar modal</button>\n      <Suspense fallback={<div>Cargando modal...</div>}>\n        {showModal && <SuperBigModal />}\n      </Suspense>\n    </div>\n  )\n}\n```\n\nDe esta forma, la parte de c√≥digo que importa el componente `SuperBigModal` se carga de forma din√°mica, es decir, cuando el usuario da click en el bot√≥n para mostrar la modal.\n\nDependiendo del empaquetador de aplicaciones web que uses y su configuraci√≥n, es posible que el resultado de la carga sea diferente (algunos crear√° un archivo a parte del *bundle* principal, otros podr√≠an hacer un streaming del HTML...) pero la intenci√≥n del c√≥digo es la misma.\n\nAs√≠ que siempre debemos intentar cargar los componentes de forma din√°mica cuando no se vayan a usar desde el principio, sobretodo cuando est√°n detr√°s de la interacci√≥n de un usuario. Lo mismo podr√≠a ocurrir con rutas completas de nuestra aplicaci√≥n. ¬øPor qu√© cargar la p√°gina de *About* si el usuario est√° visitando la p√°gina principal?\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "En React, nuestras aplicaciones est√°n creadas a partir de componentes",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øS√≥lo se pueden cargar componentes de forma din√°mica si se exportan por defecto?",
        "explanation": "No, no es necesario que los componentes se exporten por defecto para poder cargarlos de forma din√°mica. Podemos exportarlos de forma nombrada y cargarlos de forma din√°mica... pero no es lo m√°s recomendable ya que el c√≥digo necesario es mucho m√°s lioso.\n\n```jsx\n// button.jsx\n// exportamos el componente Button de forma nombrada\nexport function Button() {\n  return <button>Bot√≥n cargado din√°micamente</button>\n}\n\n// app.jsx\nimport { lazy, Suspense } from 'react'\n\n// Al hacer el import din√°mico, debemos especificar el nombre del componente que queremos importar\n// y hacer que devuelva un objeto donde la key default pasar a ser el componente nombrado\nconst Button = lazy(\n  () => import('./button.jsx')\n  .then(({Button}) => ({ default: Button }))\n)\n\nexport default function App () {\n  return (\n    <div>\n      <Suspense fallback={<div>Cargando bot√≥n...</div>}>\n        <Button />\n      </Suspense>\n    </div>\n  )\n}\n```\n\nOtra opci√≥n es tener un fichero intermedio que exporte el componente de forma por defecto y que sea el que importemos de forma din√°mica.\n\n```jsx\n// button-component.jsx\n// exportamos el componente Button de forma nombrada\nexport function Button() {\n  return <button>Bot√≥n cargado din√°micamente</button>\n}\n\n// button.jsx\nexport { Button as default } from './button-component.jsx'\n\n// app.jsx\nimport { lazy, Suspense } from 'react'\n\nconst Button = lazy(() => import('./button.jsx'))\n\nexport default function App () {\n  return (\n    <div>\n      <Suspense fallback={<div>Cargando bot√≥n...</div>}>\n        <Button />\n      </Suspense>\n    </div>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "No, no es necesario que los componentes se exporten por defecto para poder cargarlos de forma din√°mica",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el contexto en React? ¬øC√≥mo puedo crearlo y consumirlo?",
        "explanation": "El contexto es una forma de pasar datos a trav√©s de la jerarqu√≠a de componentes sin tener que pasar props manualmente en cada nivel.\n\nPara crear un contexto en React usamos el hook `createContext`:\n\n```jsx\nimport { createContext } from 'react'\n\nconst ThemeContext = createContext()\n```\n\nPara usar el contexto, debemos envolver el √°rbol de componentes con el componente `Provider`:\n\n```jsx\n<ThemeContext.Provider value=\"dark\">\n  <App />\n</ThemeContext.Provider>\n```\n\nPara consumir el contexto, debemos usar el hook `useContext`:\n\n```jsx\nimport { useContext } from 'react'\n\nfunction Button() {\n  const theme = useContext(ThemeContext)\n  return <button className={theme}>Haz clic aqu√≠</button>\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El contexto es una forma de pasar datos a trav√©s de la jerarqu√≠a de componentes sin tener que pasar props manualmente en cada nivel",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el `SyntheticEvent` en React?",
        "explanation": "El `SyntheticEvent` es una abstracci√≥n del evento nativo del navegador. Esto le permite a React tener un comportamiento consistente en todos los navegadores.\n\nDentro del `SyntheticEvent` puede encontrarse una referencia al evento nativo en su atributo `nativeEvent`\n\n```jsx\nfunction App() {\n  function handleClick(event) {\n    console.log(event)\n  }\n\n  return <button onClick={handleClick}>Haz clic aqu√≠</button>\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El `SyntheticEvent` es una abstracci√≥n del evento nativo del navegador",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es `flushSync` en React?",
        "explanation": "`flushSync(callback)` Obliga a React a ejecutar de manera s√≠ncrona todas las actualizaciones de los state dentro del callback proporcionado. As√≠ se asegura que el DOM se actualiza inmediatamente.\n\n```jsx\nimport { flushSync } from \"react-dom\"\n\nfunction App() {\n  const handleClick = () => {\n    setId(1)\n    // component no hace re-render üö´\n    flushSync(() => {\n      setId(2)\n      // component re-renderiza aqu√≠ üîÑ\n    })\n    // component ha sido re-renderizado y el DOM ha sido actualizado ‚úÖ\n    flushSync(() => {\n      setName(\"John\")\n      // component no hace re-render üö´\n      setEmail(\"john@doe.com\")\n      // component re-renderiza aqu√≠ üîÑ\n    })\n    // component ha sido re-renderizado y el DOM ha sido actualizado ‚úÖ\n  }\n\n  return <button onClick={handleClick}>Haz clic aqu√≠</button>\n}\n```\n\nNOTA: `flushSync` puede afectar significativamente el rendimiento. √ösalo con moderaci√≥n.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "`flushSync(callback)` Obliga a React a ejecutar de manera s√≠ncrona todas las actualizaciones de los state dentro del callback proporcionado",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son los Error Boundaries en React?",
        "explanation": "Los Error Boundaries son componentes que nos permiten manejar los errores que se producen en el √°rbol de componentes. Para crear un Error Boundary, debemos crear un componente que implemente el m√©todo `componentDidCatch`:\n\n```jsx\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Algo ha ido mal</h1>\n    }\n\n    return this.props.children\n  }\n}\n```\n\nDe esta forma podemos capturar los errores que se producen en el √°rbol de componentes y mostrar un mensaje de error personalizado mientras evitamos que nuestra aplicaci√≥n se rompa completamente.\n\nAhora podemos envolver el √°rbol de componentes con el componente `ErrorBoundary`:\n\n```jsx\n<ErrorBoundary>\n  <App />\n</ErrorBoundary>\n```\n\nPodemos crear un Error Boundary en cualquier nivel del √°rbol de componentes, de esta forma podemos tener un control m√°s granular de los errores.\n\n```jsx\n<ErrorBoundary>\n  <App />\n  <ErrorBoundary>\n    <SpecificComponent />\n  </ErrorBoundary>\n</ErrorBoundary>\n```\n\nPor ahora no existe una forma nativa de crear un Error Boundary en una funci√≥n de React. Para crear un Error Boundary en una funci√≥n, puedes usar la librer√≠a [react-error-boundary](https://github.com/bvaughn/react-error-boundary).\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los Error Boundaries son componentes que nos permiten manejar los errores que se producen en el √°rbol de componentes",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son las Forward Refs?",
        "explanation": "El reenv√≠o de referencia o *Forward Refs* es una t√©cnica que nos permite acceder a una referencia de un componente hijo desde un componente padre.\n\n```jsx\n// Button.jsx\nimport { forwardRef } from 'react'\n\nexport const Button = forwardRef((props, ref) => (\n  <button ref={ref} className=\"rounded border border-sky-500 bg-white\">\n    {props.children}\n  </button>\n));\n\n// Parent.jsx\nimport { Button } from './Button'\nimport { useRef } from 'react'\n\nconst Parent = () => {\n  const ref = useRef()\n\n  useEffect(() => {\n    // Desde el padre podemos hacer focus\n    // al bot√≥n que tenemos en el hijo\n    ref.current?.focus?.()\n  }, [ref.current])\n\n  return (\n    <Button ref={ref}>My button</Button>\n  )\n}\n```\n\nEn este ejemplo, recuperamos la referencia del bot√≥n (elemento HTML `<button>`) y la recupera el componente padre (`Parent`), para poder hacer focus en √©l gracias al uso de `forwardRef` en el componente hijo (`Button`).\n\nPara la gran mayor√≠a de componentes esto no es necesario pero puede ser √∫til para sistemas de dise√±o o componentes de terceros reutilizables.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El reenv√≠o de referencia o *Forward Refs* es una t√©cnica que nos permite acceder a una referencia de un componente hijo desde un componente padre",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedo validar el tipo de mis props?",
        "explanation": "React proporciona una forma de validar el tipo de las props de un componente en tiempo de ejecuci√≥n y en modo desarrollo. Esto es √∫til para asegurarnos de que los componentes se est√°n utilizando correctamente.\n\nEl paquete se llama `prop-types` y se puede instalar con `npm install prop-types`.\n\n```jsx\nimport PropTypes from \"prop-types\"\n\nfunction App(props) {\n  return <h1>{props.title}</h1>\n}\n\nApp.propTypes = {\n  title: PropTypes.string.isRequired,\n}\n```\n\nEn este ejemplo, estamos validando que la prop `title` sea de tipo `string` y que sea obligatoria.\n\nExisten una colecci√≥n de *PropTypes* ya definidas para ayudarte a comprobar los tipos de las props m√°s comunes:\n\n```js\nPropTypes.number // n√∫mero\nPropTypes.string // string\nPropTypes.array // array\nPropTypes.object // objeto\nPropTypes.bool // un booleano\nPropTypes.func // funci√≥n\nPropTypes.node // cualquier cosa renderizable en React, como un n√∫mero, string, elemento, array, etc.\nPropTypes.element // un elemento React\nPropTypes.symbol // un Symbol de JavaScript\nPropTypes.any // cualquier tipo de dato\n```\n\nA todas estas se le puede a√±adir la propiedad `isRequired` para indicar que es obligatoria.\n\n> Otra opci√≥n es usar TypeScript, un lenguaje de programaci√≥n que compila a JavaScript y que ofrece validaci√≥n de tipos de forma est√°tica. Ten en cuenta que mientras que TypeScript comprueba los tipos en tiempo de compilaci√≥n, las PropTypes lo hacen en tiempo de ejecuci√≥n.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "React proporciona una forma de validar el tipo de las props de un componente en tiempo de ejecuci√≥n y en modo desarrollo",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedo validar las propiedades de un objeto con PropTypes?",
        "explanation": "Para validar las propiedades de un objeto que se pasa como prop, podemos usar la propiedad `shape` de `PropTypes`:\n\n```jsx\nimport PropTypes from \"prop-types\"\n\nfunction App({ title }) {\n  const { text, color } = title\n  return <h1 style={{ color }}>{text}</h1>\n}\n\nApp.propTypes = {\n  title: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n  }),\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para validar las propiedades de un objeto que se pasa como prop, podemos usar la propiedad `shape` de `PropTypes`:\n\n```jsx\nimport PropTypes from \"prop-types\"\n\nfunction App({ title }) {\n  const { text, color } = title\n  return <h1 style={{ color }}>{text}</h1>\n}\n\nApp",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedo validar las propiedades de un array con PropTypes?",
        "explanation": "Para validar las propiedades de un array que se pasa como prop, podemos usar la propiedad `arrayOf` de `PropTypes`:\n\n```jsx\nimport PropTypes from \"prop-types\"\n\nfunction App({ items }) {\n  return (\n    <ul>\n      {items.map((item) => (\n        <li key={item.text}>{item.text}</li>\n      ))}\n    </ul>\n  )\n}\n\nApp.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      text: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n}\n```\n\nEn este caso estamos validando que `items` sea un array y que cada uno de sus elementos sea un objeto con la propiedad `text` de tipo `string`. Adem√°s, la prop es obligatoria.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Para validar las propiedades de un array que se pasa como prop, podemos usar la propiedad `arrayOf` de `PropTypes`:\n\n```jsx\nimport PropTypes from \"prop-types\"\n\nfunction App({ items }) {\n  return (\n    <ul>\n      {items",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedo inyectar HTML directamente en un componente de React?",
        "explanation": "Una de las razones por las que se cre√≥ React es para evitar los ataques XSS (*Cross-Site Scripting*), impidiendo que un usuario pueda inyectar c√≥digo HTML en la p√°gina.\n\nPor ello, React al intentar evaluar un string que contiene HTML lo escapa autom√°ticamente. Por ejemplo, si intentamos renderizar el siguiente string:\n\n```jsx\nconst html = \"<h1>My title</h1>\"\n\nfunction App() {\n  return <div>{html}</div>\n}\n```\n\nVeremos que en lugar de renderizar el HTML, lo escapa:\n\n```html\n<div>&lt;h1&gt;My title&lt;/h1&gt;</div>\n```\n\nSin embargo, hay ocasiones en las que es necesario inyectar HTML directamente en un componente. Ya sea por traducciones que tenemos, porque viene el HTML desde el servidor y ya viene saneado, o por un componente de terceros.\n\nPara ello, podemos usar la propiedad `dangerouslySetInnerHTML`:\n\n```jsx\nconst html = \"<h1>My title</h1>\"\n\nfunction App() {\n  return <div dangerouslySetInnerHTML={{ __html: html }} />\n}\n```\n\nAhora s√≠ veremos el HTML renderizado:\n\n```html\n<div><h1>My title</h1></div>\n```\n\nComo ves, **el nombre ya nos indica que es una propiedad peligrosa y que debemos usarla con cuidado.** Intenta evitarla siempre que puedas y s√≥lo recurre a ella cuando realmente no tengas otra opci√≥n.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Una de las razones por las que se cre√≥ React es para evitar los ataques XSS (*Cross-Site Scripting*), impidiendo que un usuario pueda inyectar c√≥digo HTML en la p√°gina",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPor qu√© puede ser mala idea pasar siempre todas las props de un objeto a un componente?",
        "explanation": "Digamos que tenemos un componente `App` que recibe un objeto `props` con todas las props que necesita:\n\n```jsx\nfunction App(props) {\n  return <h1>{props.title}</h1>\n}\n```\n\nY que tenemos otro componente `Layout` que recibe un objeto `props` con todas las props que necesita:\n\n```jsx\nfunction Layout(props) {\n  return (\n    <div>\n      <App {...props} />\n    </div>\n  )\n}\n```\n\nEn este caso, `Layout` est√° pasando todas las props que recibe a `App`. Esto puede ser una mala idea por varias razones:\n\n- Si `Layout` recibe una prop que no necesita, la pasar√° a `App` y √©ste puede que no la use. Esto puede ser confuso para el que lea el c√≥digo.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Digamos que tenemos un componente `App` que recibe un objeto `props` con todas las props que necesita:\n\n```jsx\nfunction App(props) {\n  return <h1>{props",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øCu√°l es el prop√≥sito del atributo \"key\" en React y por qu√© es importante usarlo correctamente al renderizar listas de elementos?",
        "explanation": "El prop√≥sito del atributo \"key\" en React es proporcionar una identificaci√≥n √∫nica a cada elemento en una lista renderizada din√°micamente. Esto permite a React identificar qu√© elementos han cambiado, a√±adido o eliminado de la lista cuando se realiza una actualizaci√≥n. \n\nCuando se renderiza una lista en React sin el atributo \"key\", React puede tener dificultades para identificar correctamente los cambios en la lista, lo que puede resultar en un comportamiento inesperado, como la re-renderizaci√≥n innecesaria de elementos o la p√©rdida de estado de los componentes.\n\nPor lo tanto, es importante utilizar el atributo \"key\" de manera correcta y √∫nica para cada elemento de la lista, preferiblemente utilizando identificadores √∫nicos de cada elemento en lugar de √≠ndices de array, para garantizar un rendimiento √≥ptimo y un comportamiento predecible en la aplicaci√≥n.\n\nEjemplo de c√≥mo utilizar el atributo \"key\" en React:\n\n```jsx\nimport React from 'react';\n\nconst ListaItems = ({ items }) => {\n  return (\n    <ul>\n      {items.map((item) => (\n        <li key={item.id}>{item.nombre}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ListaItems;\n```\n\n---\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n### Experto",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El prop√≥sito del atributo \"key\" en React es proporcionar una identificaci√≥n √∫nica a cada elemento en una lista renderizada din√°micamente",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øEs React una biblioteca o un framework? ¬øPor qu√©?",
        "explanation": "Existe una fina l√≠nea hoy en d√≠a entre qu√© es una biblioteca o un framework. Oficialmente, React se autodenomina como biblioteca. Esto es porque para poder crear una aplicaci√≥n completa, necesitas usar otras bibliotecas.\n\nPor ejemplo, *React* no ofrece un sistema de enrutado de aplicaciones oficial. Por ello, hay que usar una biblioteca como [React Router](https://reactrouter.com/) o usar un *framework* como [Next.js](https://nextjs.org/) que ya incluye un sistema de enrutado.\n\nTampoco puedes usar React para a√±adir las cabeceras que van en el `<head>` en tu aplicaci√≥n, y tambi√©n necesitar√°s otra biblioteca o framework para solucionar esto.\n\nOtra diferencia es que React no est√° opinionado sobre qu√© empaquetador de aplicaciones usar. En cambio `Angular` en su propio tutorial ya te indica que debes usar `@angular/cli` para crear una aplicaci√≥n, en cambio React siempre te deja la libertad de elegir qu√© empaquetador usar y ofrece diferentes opciones.\n\nA√∫n as√≠, existe gente que considera a React como un framework. Aunque no hay una definici√≥n oficial de qu√© es un framework, la mayor√≠a de la gente considera que un framework es una biblioteca que incluye otras bibliotecas para crear una aplicaci√≥n completa de forma opinionada y casi sin configuraci√≥n.\n\nPor ejemplo, **Next.js se podr√≠a considerar un framework de React** porque incluye React, un sistema de enrutado, un sistema de renderizado del lado del servidor, etc.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Existe una fina l√≠nea hoy en d√≠a entre qu√© es una biblioteca o un framework",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPara qu√© sirve el hook `useImperativeHandle`?",
        "explanation": "Nos permite definir qu√© propiedades y m√©todos queremos que sean accesibles desde el componente padre.\n\nEn el siguiente ejemplo vamos a crear un componente `TextInput` que tiene un m√©todo `focus` que cambia el foco al elemento `<input>`.\n\n```jsx\nimport { useRef, useImperativeHandle } from 'react'\n\nfunction TextInput(props, ref) {\n  const inputEl = useRef(null)\n\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      inputEl.current.focus()\n    }\n  }))\n\n  return (\n    <input ref={inputEl} type=\"text\" />\n  )\n}\n```\n\nCreamos una referencia `inputEl` con `useRef` y la pasamos al elemento `<input>` como prop `ref`. Cuando el componente se monta, la referencia `inputEl` apunta al elemento `<input>` del DOM.\n\nPara acceder al elemento del DOM, usamos la propiedad `current` de la referencia.\n\nPara que el componente padre pueda acceder al m√©todo `focus`, usamos el hook `useImperativeHandle`. Este hook recibe dos par√°metros: una referencia y una funci√≥n que devuelve un objeto con las propiedades y m√©todos que queremos que sean accesibles desde el componente padre.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Nos permite definir qu√© propiedades y m√©todos queremos que sean accesibles desde el componente padre",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPara qu√© sirve el m√©todo `cloneElement` de React?",
        "explanation": "Te permite clonar un elemento React y a√±adirle o modificar las props que recibe.\n\n```jsx\nimport { cloneElement } from 'react'\n\nconst Hello = ({ name }) => <h1>Hello {name}</h1>\n\nconst App = () => {\n  const element = <Hello name=\"midudev\" />\n\n  return (\n    <div>\n      {cloneElement(element, { name: 'TMChein' })}\n      {cloneElement(element, { name: 'Madeval' })}\n      {cloneElement(element, { name: 'Gorusuke' })}\n    </div>\n  )\n}\n```\n\nEn este ejemplo, clonamos `element` que ten√≠a la prop `midudev` y le pasamos una prop `name` diferente cada vez. Esto renderizar√° tres veces el componente `Hello` con los nombres `TMChein`, `Madeval` y `Gorusuke`. Sin rastro de la prop original.\n\nPuede ser √∫til para modificar un elemento que ya nos viene de un componente padre y del que no tenemos posibilidad de re-crear con el componente.\n\n- [C√≥digo de ejemplo](https://stackblitz.com/edit/react-ts-tc39vr?file=App.tsx)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Te permite clonar un elemento React y a√±adirle o modificar las props que recibe",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© son los portales en React?",
        "explanation": "Los portales nos permiten renderizar un componente en un nodo del DOM que no es hijo del componente que lo renderiza.\n\nEs perfecto para ciertos casos de uso como, por ejemplo, modales:\n\n```jsx\nimport { createPortal } from 'react-dom'\n\nfunction Modal() {\n  return createPortal(\n    <div className=\"modal\">\n      <h1>Modal</h1>\n    </div>,\n    document.getElementById('modal')\n  )\n}\n```\n\n`createPortal` acepta dos par√°metros:\n\n- El primer par√°metro es el componente que queremos renderizar\n- El segundo par√°metro es el nodo del DOM donde queremos renderizar el componente\n\nEn este caso el modal se renderiza en el nodo `#modal` del DOM.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Los portales nos permiten renderizar un componente en un nodo del DOM que no es hijo del componente que lo renderiza",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPor qu√© `StrictMode` renderiza dos veces la aplicaci√≥n?",
        "explanation": "Cuando el modo `StrictMode` est√° activado, React monta los componentes dos veces (el estado y el DOM se preserva). Esto ayuda a encontrar efectos que necesitan una limpieza o expone problemas con *race conditions*.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Cuando el modo `StrictMode` est√° activado, React monta los componentes dos veces (el estado y el DOM se preserva)",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© problemas crees que pueden aparecer en una aplicaci√≥n al querer visualizar listas de miles/millones de datos?",
        "explanation": "- **Tiempo de respuesta del servidor:** Hacer peticiones de millones de datos no es, en general, una buena estrategia. Incluso en el mejor de los casos, en el que el servidor solo debe devolver los datos sin tratarlos, hay un coste asociado al *parseo* y *env√≠o* de los mismos a trav√©s de la red. Llamadas con un tama√±o desmesurado pueden incurrir en interfaces lentas, e incluso en *timeouts* en la respuesta.\n- **Problemas de rendimiento:** Aunque es cierto que **React** se basa en un modelo *declarativo* en el cual no debemos tener una exhaustivo control o gesti√≥n de c√≥mo se *renderiza*, no hay que olvidar que malas decisiones t√©cnicas pueden conllevar aplicaciones totalmente inestables incluso con las mejores tecnolog√≠as. No es viable *renderizar* un *DOM* con millones de elementos, el *navegador* no podr√° gestionarlo y, tarde o temprano, la aplicaci√≥n no ser√° usable.\n\n Como developers, nuestra misi√≥n es encontrar el equilibrio entre rendimiento y experiencia, intentando priorizar siempre c√≥mo el usuario sentir√° la aplicaci√≥n. No hay ning√∫n caso lo suficientemente justificado para *renderizar* en pantalla miles de datos.\n\n **El espacio de visualizaci√≥n es limitado (*viewport*), al igual que deber√≠an serlo los datos que a√±adimos al DOM.**\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "- **Tiempo de respuesta del servidor:** Hacer peticiones de millones de datos no es, en general, una buena estrategia",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes abortar una petici√≥n fetch con `useEffect` en React?",
        "explanation": "Si quieres evitar que exista una *race condition* entre una petici√≥n as√≠ncrona y que el componente se desmonte, puedes usar la API de `AbortController` para abortar la petici√≥n cuando lo necesites:\n\n```jsx\nimport { useEffect, useState } from 'react'\n\nfunction Movies () {\n  const [movies, setMovies] = useState([])\n\n  useEffect(() => {\n    // creamos un controlador para abortar la petici√≥n\n    const abortController = new AbortController()\n\n    // pasamos el signal al fetch para que sepa que debe abortar\n    fetchMovies({ signal: abortController.signal })\n      .then(() => {\n        setMovies(data.results)\n      }).catch(error => {\n        if (error.name === 'AbortError')¬†{\n          console.log('fetch aborted')\n        }\n      })\n\n    return () => {\n      // al desmontar el componente, abortamos la petici√≥n\n      // s√≥lo funcionar√° si la petici√≥n sigue en curso\n      abortController.abort()\n    }\n  })\n\n  // ...\n}\n\n// Debemos pasarle el par√°metro signal al `fetch`\n// para que enlace la petici√≥n con el controlador\nconst fetchMovies = ({ signal }) => {\n  return fetch('https://api.themoviedb.org/3/movie/popular', {\n    signal // <--- pasamos el signal\n  }).then(response => response.json())\n}\n```\n\nDe esta forma evitamos que se produzca un error por parte de React de intentar actualizar el estado de un componente que ya no existe, adem√°s de evitar que se produzcan llamadas innecesarias al servidor.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Si quieres evitar que exista una *race condition* entre una petici√≥n as√≠ncrona y que el componente se desmonte, puedes usar la API de `AbortController` para abortar la petici√≥n cuando lo necesites:\n\n```jsx\nimport { useEffect, useState } from 'react'\n\nfunction Movies () {\n  const [movies, setMovies] = useState([])\n\n  useEffect(() => {\n    // creamos un controlador para abortar la petici√≥n\n    const abortController = new AbortController()\n\n    // pasamos el signal al fetch para que sepa que debe abortar\n    fetchMovies({ signal: abortController",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© soluci√≥n/es implementar√≠as para evitar problemas de rendimiento al trabajar con listas de miles/millones de datos?",
        "explanation": "##### Pagination\n\nEn lugar de recibir la lista en una sola llamada a la API (lo cual ser√≠a negativo tanto para el rendimiento como para el propio servidor y tiempo de respuesta de la API), podr√≠amos implementar un sistema de paginaci√≥n en el cual la API recibir√° un *offset* o *rango* de datos deseados. En el FE nuestra responsabilidad es mostrar unos controles adecuados (interfaz de paginaci√≥n) y gestionar las llamadas a petici√≥n de cambio de p√°gina para siempre limitar la cantidad de DOM renderizado evitando as√≠ una sobrecarga del *DOM* y, por lo tanto, problemas de rendimiento.\n\n##### Virtualization\n\nExiste una t√©cnica llamada *Virtualizaci√≥n* que gestiona cu√°ntos elementos de una lista mantenemos ***vivos*** en el *DOM*. El concepto se basa en solo montar los elementos que est√©n dentro del *viewport* m√°s un *buffer* determinado (para evitar falta de datos al hacer scroll) y, en cambio, desmontar del *DOM* todos aquellos elementos que est√©n fuera de la vista del usuario. De este modo podremos obtener lo mejor de los dos mundos, una experiencia integrada y un DOM liviano que evitar√° posibles errores de rendimiento. Con esta soluci√≥n tambi√©n podremos aprovechar que contamos con los datos en memoria para realizar b√∫squedas/filtrados sin necesidad de m√°s llamadas al servidor.\n\nPuedes consultar esta librer√≠a para aplicar Virtualizaci√≥n con React: [React Virtualized](https://github.com/bvaughn/react-virtualized).\n\nHay que tener en cuenta que cada caso de uso puede encontrar beneficios y/o perjuicios en ambos m√©todos, dependiendo de factores como capacidad de respuesta de la API, cantidad de datos, necesidad de filtros complejos, etc. Por ello es importante analizar cada caso con criterio.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "##### Pagination\n\nEn lugar de recibir la lista en una sola llamada a la API (lo cual ser√≠a negativo tanto para el rendimiento como para el propio servidor y tiempo de respuesta de la API), podr√≠amos implementar un sistema de paginaci√≥n en el cual la API recibir√° un *offset* o *rango* de datos deseados",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el hook `useDebugValue`?",
        "explanation": "Nos permite mostrar un valor personalizado en la pesta√±a de *React DevTools* que nos permitir√° depurar nuestro c√≥digo.\n\n```jsx\nimport { useDebugValue } from 'react'\n\nfunction useCustomHook() {\n  const value = 'custom value'\n  useDebugValue(value)\n  return value\n}\n```\n\nEn este ejemplo, el valor personalizado que se muestra en la pesta√±a de *React DevTools* es `custom value`.\n\nAunque es √∫til para depurar, no se recomienda usar este hook en producci√≥n.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Nos permite mostrar un valor personalizado en la pesta√±a de *React DevTools* que nos permitir√° depurar nuestro c√≥digo",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el `Profiler` en React?",
        "explanation": "El `Profiler` es un componente que nos permite medir el tiempo que tarda en renderizarse un componente y sus hijos.\n\n```jsx\nimport { Profiler } from 'react'\n\nfunction App() {\n  return (\n    <Profiler id=\"App\" onRender={(id, phase, actualDuration) => {\n      console.log({id, phase, actualDuration})\n    }}>\n      <Component />\n    </Profiler>\n  )\n}\n```\n\nEl componente `Profiler` recibe dos par√°metros:\n\n- `id`: es un identificador √∫nico para el componente\n- `onRender`: es una funci√≥n que se ejecuta cada vez que el componente se renderiza\n\nEsta informaci√≥n es muy √∫til para detectar componentes que toman mucho tiempo en renderizarse y optimizarlos.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El `Profiler` es un componente que nos permite medir el tiempo que tarda en renderizarse un componente y sus hijos",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes acceder al evento nativo del navegador en React?",
        "explanation": "React no expone el evento nativo del navegador. En su lugar, React crea un objeto sint√©tico que se basa en el evento nativo del navegador llamado `SyntheticEvent`. Para acceder al evento nativo del navegador, debemos usar el atributo `nativeEvent`:\n\n```jsx\nfunction Button({ onClick }) {\n  return <button onClick={e => onClick(e.nativeEvent)}>Haz clic aqu√≠</button>\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "React no expone el evento nativo del navegador",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes registrar un evento en la fase de captura en React?",
        "explanation": "En React, los eventos se registran en la fase de burbuja por defecto. Para registrar un evento en la fase de captura, debemos a√±adir `Capture` al nombre del evento:\n\n```jsx\nfunction Button({ onClick }) {\n  return <button onClickCapture={onClick}>Haz clic aqu√≠</button>\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "En React, los eventos se registran en la fase de burbuja por defecto",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øC√≥mo puedes mejorar el rendimiento del Server Side Rendering en React para evitar que bloquee el hilo principal?",
        "explanation": "Aunque puedes usar el m√©todo `renderToString` para renderizar el HTML en el servidor, este m√©todo es s√≠ncrono y bloquea el hilo principal. Para evitar que bloquee el hilo principal, debemos usar el m√©todo `renderToPipeableStream`:\n\n```jsx\nlet didError = false\nconst stream = renderToPipeableStream(\n  <App />,\n  {\n    onShellReady() {\n      // El contenido por encima de los l√≠mites de Suspense ya est√°n listos\n      // Si hay un error antes de empezar a hacer stream, mostramos el error adecuado\n      res.statusCode = didError ? 500 : 200\n      res.setHeader('Content-type', 'text/html')\n      stream.pipe(res)\n    },\n    onShellError(error) {\n      // Si algo ha ido mal al renderizar el contenido anterior a los l√≠mites de Suspense, lo indicamos.\n      res.statusCode = 500\n      res.send(\n        '<!doctype html><p>Loading...</p><script src=\"clientrender.js\"></script>'\n      )\n    },\n    onAllReady() {\n      // Si no quieres hacer streaming de los datos, puedes usar\n      // esto en lugar de onShellReady. Esto se ejecuta cuando\n      // todo el HTML est√° listo para ser enviado.\n      // Perfecto para crawlers o generaci√≥n de sitios est√°ticos\n\n      // res.statusCode = didError ? 500 : 200\n      // res.setHeader('Content-type', 'text/html')\n      // stream.pipe(res)\n    },\n    onError(err) {\n      didError = true\n      console.error(err)\n    },\n  }\n)\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Aunque puedes usar el m√©todo `renderToString` para renderizar el HTML en el servidor, este m√©todo es s√≠ncrono y bloquea el hilo principal",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© diferencia hay entre `renderToStaticNodeStream()` y `renderToPipeableStream()`?",
        "explanation": "`renderToStaticNodeStream()` devuelve un stream de nodos est√°ticos, esto significa que no a√±ade atributos extras para el DOM que React usa internamente para poder lograr la hidrataci√≥n del HTML en el cliente. Esto significa que no podr√°s hacer el HTML interactivo en el cliente, pero puede ser √∫til para p√°ginas totalmente est√°ticas.\n\n`renderToPipeableStream()` devuelve un stream de nodos que contienen atributos del DOM extra para que React pueda hidratar el HTML en el cliente. Esto significa que podr√°s hacer el HTML interactivo en el cliente pero puede ser m√°s lento que `renderToStaticNodeStream()`.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "`renderToStaticNodeStream()` devuelve un stream de nodos est√°ticos, esto significa que no a√±ade atributos extras para el DOM que React usa internamente para poder lograr la hidrataci√≥n del HTML en el cliente",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPara qu√© sirve el hook `useDeferredValue`?",
        "explanation": "El hook `useDeferredValue` nos permite renderizar un valor con una prioridad baja. Esto es √∫til para renderizar un valor que no es cr√≠tico para la interacci√≥n del usuario.\n\n```jsx\nfunction App() {\n  const [text, setText] = useState('¬°Hola mundo!')\n  const deferredText = useDeferredValue(text, { timeoutMs: 2000 })\n\n  return (\n    <div className='App'>\n      {/* Seguimos pasando el texto actual como valor del input */}\n      <input value={text} onChange={handleChange} />\n      ...\n      {/* Pero la lista de resultados se podr√≠a renderizar m√°s tarde si fuera necesario */}\n      <MySlowList text={deferredText} />\n    </div>\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El hook `useDeferredValue` nos permite renderizar un valor con una prioridad baja",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øPara qu√© sirve el m√©todo `renderToReadableStream()`?",
        "explanation": "Este m√©todo es similar a `renderToNodeStream`, pero est√° pensado para entornos que soporten Web Streams como `Deno`.\n\nUn ejemplo de uso ser√≠a el siguiente:\n\n```jsx\nconst controller = new AbortController()\nconst { signal } = controller\n\nlet didError = false\n\ntry {\n  const stream = await renderToReadableStream(\n    <html>\n      <body>Success</body>\n    </html>,\n    {\n      signal,\n      onError(error) {\n        didError = true\n        console.error(error)\n      }\n    }\n  )\n\n  // Si quieres enviar todo el HTML en vez de hacer streaming, puedes usar esta l√≠nea\n  // Es √∫til para crawlers o generaci√≥n est√°tica:\n  // await stream.allReady\n\n  return new Response(stream, {\n    status: didError ? 500 : 200,\n    headers: {'Content-Type': 'text/html'},\n  })\n} catch (error) {\n  return new Response(\n    '<!doctype html><p>Loading...</p><script src=\"clientrender.js\"></script>',\n    {\n      status: 500,\n      headers: {'Content-Type': 'text/html'},\n    }\n  )\n}\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---\n\n### ¬øC√≥mo puedo hacer testing de un componente?\n\nPara hacer testing de un componente, puedes usar la funci√≥n `render` de la librer√≠a `@testing-library/react`. Esta funci√≥n nos permite renderizar un componente y obtener el resultado.\n\n```jsx\nimport { render } from '@testing-library/react'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  const increment = () => setCount(count + 1)\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  )\n}\n\ntest('Counter', () => {\n  const { getByText } = render(<Counter />)\n\n  expect(getByText('Count: 0')).toBeInTheDocument()\n  fireEvent.click(getByText('Increment'))\n  expect(getByText('Count: 1')).toBeInTheDocument()\n})\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---\n\n### ¬øC√≥mo puedo hacer testing de un hook?\n\nPara hacer testing de un hook, puedes usar la funci√≥n `renderHook` de la librer√≠a `@testing-library/react-hooks`. Esta funci√≥n nos permite renderizar un hook y obtener el resultado.\n\n```jsx\nimport { renderHook } from '@testing-library/react-hooks'\n\nfunction useCounter() {\n  const [count, setCount] = useState(0)\n  const increment = () => setCount(count + 1)\n  return { count, increment }\n}\n\ntest('useCounter', () => {\n  const { result } = renderHook(() => useCounter())\n\n  expect(result.current.count).toBe(0)\n  act(() => {\n    result.current.increment()\n  })\n  expect(result.current.count).toBe(1)\n})\n```\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Este m√©todo es similar a `renderToNodeStream`, pero est√° pensado para entornos que soporten Web Streams como `Deno`",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es Flux?",
        "explanation": "*Flux* es un patr√≥n de arquitectura de aplicaciones que se basa en un unidireccional de datos. En este patr√≥n, los datos fluyen en una sola direcci√≥n: de las vistas a los stores.\n\nNo es espec√≠fico de React y se puede usar con cualquier librer√≠a de vistas. En este patr√≥n, los stores son los encargados de almacenar los datos de la aplicaci√≥n. Los stores emiten eventos cuando los datos cambian. Las vistas se suscriben a estos eventos para actualizar los datos.\n\nEsta arquitectura fue creada por Facebook para manejar la complejidad de sus aplicaciones. *Redux* se bas√≥ en este patr√≥n para crear una biblioteca de gesti√≥n de estado global.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---\n\n### Errores T√≠picos en React",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "*Flux* es un patr√≥n de arquitectura de aplicaciones que se basa en un unidireccional de datos",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© quiere decir: Warning: Each child in a list should have a unique key prop?",
        "explanation": "Es un error bastante com√∫n en React y que puede parecernos un poco extra√±o si estamos empezando a aprender esta tecnolog√≠a. Por suerte, es bastante sencillo de solucionar.\n\nB√°sicamente, este mensaje aparece en la consola cuando estamos renderizando un listado dentro de nuestro componente, pero no le estamos indicando la propiedad \"key\". React usa esta propiedad para **determinar qu√© elemento hijo dentro de un listado ha sufrido cambios,** por lo que funciona como una especie de identificativo.\n\nDe esta manera, React utiliza esta informaci√≥n para **identificar las diferencias existentes con respecto al DOM** y optimizar la renderizaci√≥n del listado, determinando qu√© elementos necesitan volverse a calcular. Esto habitualmente pasa cuando agregamos, eliminamos o cambiamos el orden de los items en una lista.\n\nRecomendamos revisar las siguientes secciones:\n\n- [¬øQu√© es el renderizado de listas en React?](#qu√©-es-el-renderizado-de-listas-en-react)\n\n- [¬øPor qu√© puede ser mala pr√°ctica usar el ¬¥index¬¥ como key en un listado de React?](#por-qu√©-puede-ser-mala-pr√°ctica-usar-el-index-como-key-en-un-listado-de-react)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Es un error bastante com√∫n en React y que puede parecernos un poco extra√±o si estamos empezando a aprender esta tecnolog√≠a",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "React Hook useXXX is called conditionally. React Hooks must be called in the exact same order in every component render",
        "explanation": "Una de las reglas de los hooks de React es que deben llamarse en el mismo orden en cada renderizado. React lo necesita para saber en qu√© orden se llaman los hooks y as√≠ mantener el estado de los mismos internamente. Por ello, los hooks no pueden usarse dentro de una condici√≥n `if`, ni un loop, ni tampoco dentro de una funci√≥n an√≥nima. Siempre deben estar en el nivel superior de la funci√≥n.\n\nPor eso el siguiente c√≥digo es incorrecto:\n\n```jsx\n// ‚ùå c√≥digo incorrecto por saltar las reglas de los hooks\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  // de forma condicional, creamos un estado con el hook useState\n  // lo que rompe la regla de los hooks\n  if (count > 0) {\n    const [name, setName] = useState('midu')\n  }\n\n  return <div>{count} {name}</div>\n}\n```\n\nTambi√©n el siguiente c√≥digo ser√≠a incorrecto, aunque no lo parezca, ya que estamos usando el segundo `useState` de forma condicional (pese a no estar dentro de un `if`) ya que se ejecutar√° s√≥lo cuando `count` sea diferente a `0`:\n\n```jsx\n// ‚ùå c√≥digo incorrecto por saltar las reglas de los hooks\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  // si count es 0, no se ejecuta el siguiente hook useState\n  // ya que salimos de la ejecuci√≥n aqu√≠\n  if (count === 0) return null\n\n  const [name, setName] = useState('midu')\n\n  return <div>{count} {name}</div>\n}\n```\n\nTen en cuenta que si ignoras este error, es posible que tus componentes no se comporten de forma correcta y tengas comportamientos no esperados en el funcionamiento de tus componentes.\n\nPara arreglar este error, como hemos comentado antes, debes asegurarte de que los hooks se llaman en el mismo orden en cada renderizado. El √∫ltimo ejemplo quedar√≠a as√≠:\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  // movemos el hook useState antes del if\n  const [name, setName] = useState('midu')\n\n  if (count === 0) return null\n\n  return <div>{count} {name}</div>\n}\n```\n\nRecomendamos revisar las siguientes secciones:\n\n- [¬øCu√°les son las reglas de los hooks en React?](#cu√°les-son-las-reglas-de-los-hooks-en-react)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Una de las reglas de los hooks de React es que deben llamarse en el mismo orden en cada renderizado",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "Can‚Äôt perform a React state update on an unmounted component",
        "explanation": "Este error se produce cuando intentamos actualizar el estado de un componente que ya no est√° montado. Esto puede ocurrir cuando el componente se desmonta antes de que se complete una petici√≥n as√≠ncrona, por ejemplo:\n\n```jsx\nfunction Movies () {\n  const [movies, setMovies] = useState([])\n\n  useEffect(() => {\n    fetchMovies().then(() => {\n      setMovies(data.results)\n    })\n  })\n\n  if (!movies.length) return null\n\n  return (\n    <section>\n      {movies.map(movie => (\n        <article key={movie.id}>\n          <h2>{movie.title}</h2>\n          <p>{movie.overview}</p>\n        </article>\n      ))}\n    </section>\n  )\n}\n```\n\nParece un c√≥digo inofensivo, pero imagina que usamos este componente en una p√°gina. Si el usuario navega a otra p√°gina antes de que se complete la petici√≥n, el componente se desmontar√° y React lanzar√° el error, ya que intentar√° ejecutar el `setMovies` en un componente (Movies) que ya no est√° montado.\n\nPara evitar este error, podemos usar una variable booleana con `useRef` que nos indique si el componente est√° montado o no. De esta manera, podemos evitar que se ejecute el `setMovies` si el componente no est√° montado:\n\n```jsx\nfunction Movies () {\n  const [movies, setMovies] = useState([])\n  const mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n\n    fetchMovies().then(() => {\n      if (mounted.current) {\n        setMovies(data.results)\n      }\n    })\n\n    return () => mounted.current = false\n  })\n\n  // ...\n}\n```\n\nEsto soluciona el problema pero **no evita que se haga la petici√≥n aunque el componente ya no est√© montado**. Para cancelar la petici√≥n y as√≠ ahorrar transferencia de datos, podemos abortar la petici√≥n usando la API `AbortController`:\n\n```jsx\nfunction Movies () {\n  const [movies, setMovies] = useState([])\n\n  useEffect(() => {\n    // creamos un controlador para abortar la petici√≥n\n    const abortController = new AbortController()\n\n    // pasamos el signal al fetch para que sepa que debe abortar\n    fetchMovies({ signal: abortController.signal })\n      .then(() => {\n        setMovies(data.results)\n      }).catch(error => {\n        if (error.name === 'AbortError')¬†{\n          console.log('fetch aborted')\n        }\n      })\n\n    return () => {\n      // al desmontar el componente, abortamos la petici√≥n\n      // s√≥lo funcionar√° si la petici√≥n sigue en curso\n      abortController.abort()\n    }\n  })\n\n  // ...\n}\n\n// Debemos pasarle el par√°metro signal al `fetch`\n// para que enlace la petici√≥n con el controlador\nconst fetchMovies = ({ signal }) => {\n  return fetch('https://api.themoviedb.org/3/movie/popular', {\n    signal // <--- pasamos el signal\n  }).then(response => response.json())\n}\n```\n\nS√≥lo ten en cuenta la compatibilidad de `AbortController` en los navegadores. En [caniuse](https://caniuse.com/#feat=abortcontroller) puedes ver que no est√° soportado en Internet Explorer y versiones anteriores de Chrome 66, Safari 12.1 y Edge 16.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Este error se produce cuando intentamos actualizar el estado de un componente que ya no est√° montado",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "Too many re-renders. React limits the number of renders to prevent an infinite loop",
        "explanation": "Este error indica que algo dentro de nuestro componente est√° generando muchos pintados que pueden desembocar en un *loop* (bucle) infinito. Algunas de las razones por las que puede aparecer este error son las siguientes:\n\n1. **Llamar a una funci√≥n que actualiza el estado en el renderizado del componente.**\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n// ‚ùå c√≥digo incorrecto\n// no debemos actualizar el estado de manera directa\n  setCount(count + 1)\n\n  return <div>{count}</div>\n}\n```\n\nLo que sucede en este ejemplo, es que al *renderizarse* el componente, se llama a la funci√≥n `setCount` para actualizar el estado. Una vez el estado es actualizado, se genera nuevamente un *render* del componente y se repite todo el proceso infinitas veces.\n\nUna posible soluci√≥n ser√≠a:\n\n```jsx\nfunction Counter() {\n  // ‚úÖ c√≥digo correcto\n  // se pasa el valor inicial deseado en el `useState`\n  const [count, setCount] = useState(1)\n\n  return <div>{count}</div>\n}\n```\n\n**Llamar directamente a una funci√≥n en un controlador de eventos.**\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  // ‚ùå c√≥digo incorrecto\n  //se ejecuta directamente la funci√≥n `setCount` y provoca un renderizado infinito\n  return <div>\n    <p>Contador: {count}</p>\n    <button onClick={setCount(count + 1)}>Incrementar</button>\n  </div>\n}\n```\n\nEn este c√≥digo, se est√° ejecutando la funci√≥n `setCount` que actualiza el estado en cada renderizado del componente, lo que provoca renderizaciones infinitas.\n\nLa manera correcta ser√≠a la siguiente:\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  // ‚úÖ c√≥digo correcto\n  // se pasa un callback al evento `onClick`\n  // esto evita que la funci√≥n se ejecute en el renderizado\n  return <div>\n    <p>Contador: {count}</p>\n    <button onClick={() => setCount(count + 1)}>Incrementar</button>\n  </div>\n}\n```\n\n**Usar incorrectamente el Hook de `useEffect`.**\n\nAl ver este ejemplo:\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  // ‚ùå c√≥digo incorrecto\n  useEffect(() => {\n    setCounter(counter + 1)\n  }) // üëàÔ∏è no colocar el array de dependencias\n\n  return <div>{count}</div>\n}\n```\n\nLo que ocurre, es que al no colocar un array de dependencias en el hook de `useEffect`, estamos provocando que el c√≥digo que se encuentre dentro se ejecute en cada renderizado del componente. Al llamar al `setCounter` y actualizar el estado, obtenemos nuevamente renderizaciones infinitas.\n\nPara solucionarlo, podemos hacer lo siguiente:\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0)\n\n  // ‚úÖ c√≥digo correcto\n  // estamos indicando que s√≥lo queremos que el c√≥digo se ejecute una vez\n  useEffect(() => {\n    setCounter(counter + 1)\n  }, []) //colocamos un array de dependencias vac√≠o.\n\n  return <div>{count}</div>\n}\n```\n\nEstas son solo algunas de las posibles causas que podemos encontrar cuando nos topamos con este mensaje de error en el c√≥digo. Si quieres complementar esta informaci√≥n, te recomendamos revisar las siguientes secciones:\n\n- [¬øQu√© es el estado en React?](#qu√©-es-el-estado-en-react)\n- [¬øQu√© son los hooks?](#qu√©-son-los-hooks)\n- [¬øQu√© hace el hook useState?](#qu√©-hace-el-hook-usestate)\n- [¬øQu√© hace el hook useEffect?](#qu√©-hace-el-hook-useeffect)\n- [¬øCu√°les son las reglas de los hooks en React?](#cu√°les-son-las-reglas-de-los-hooks-en-react)\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "Este error indica que algo dentro de nuestro componente est√° generando muchos pintados que pueden desembocar en un *loop* (bucle) infinito",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© diferencia existe entre Shadow DOM y Virtual DOM?",
        "explanation": "El **Shadow DOM** es una API del navegador que nos permite crear un √°rbol de nodos DOM independiente dentro de un elemento del DOM. Esto nos permite crear componentes que no interfieran con el resto de la aplicaci√≥n. Se usa especialmente con Web Components.\n\nEl **Virtual DOM** es una representaci√≥n del DOM en memoria. Esta representaci√≥n se crea cada vez que se produce un cambio en el DOM. Esto nos permite comparar el DOM actual con el DOM anterior y as√≠ determinar qu√© cambios se deben realizar en el DOM real. Lo usa React y otras bibliotecas para hacer el m√≠nimo n√∫mero de cambios en el DOM real.\n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "El **Shadow DOM** es una API del navegador que nos permite crear un √°rbol de nodos DOM independiente dentro de un elemento del DOM",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    },
    {
        "question": "¬øQu√© es el Binding?",
        "explanation": "En React, el **Binding** se refiere a la forma en que se relaciona y sincroniza el **estado** *(state)* de un componente con su **vista** *(render)*. El estado de un componente es un objeto que contiene informaci√≥n que puede ser utilizada para determinar c√≥mo se debe mostrar el componente. Existen **dos** tipos de binding en React: **One-Way Binding** y **Two-Way Binding**.\n\n**One-Way Binding** *(Enlace unidireccional)*:\n\nEn React se refiere a la capacidad de un componente para actualizar su **estado** *(state)* y su **vista** *(render)* de manera autom√°tica cuando cambia el estado, pero no permitiendo que la vista actualice el estado. En otras palabras, el **one-way binding** significa que el flujo de datos es unidireccional, desde el estado hacia la vista, y no al rev√©s.\n\nPor ejemplo:\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction OneWayBindingExample() {\n  const [name, setName] = useState('midu');\n\n  return (\n    <div>\n      <p>Hello, {name}</p>\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        onChange={(e) => setName(e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default OneWayBindingExample;\n```\n\n*En este ejemplo, el componente tiene un estado inicial llamado **name** con el valor **midu**. La funci√≥n **setName** se utiliza para actualizar el estado **name** cuando se produce un evento **onChange** en el input. Sin embargo, la **vista** (la linea que muestra **Hello, {name}**) no tiene la capacidad de actualizar el estado **name**.*\n\n**Two-Way Binding** *(Enlace bidireccional)*:\n\nSe refiere a la capacidad de un componente para actualizar su estado y su vista de manera autom√°tica tanto cuando cambia el estado como cuando se produce un evento en la vista. En otras palabras, el **Two-Way Binding** significa que el flujo de datos es bidireccional, desde el estado hacia la vista y desde la vista hacia el estado. Para lograr esto se utilizan en conjunto con los eventos, como **onChange**, para capturar la informaci√≥n de los inputs y actualizar el estado, *React no proporciona un mecanismo nativo para two-way binding, pero se puede lograr utilizando librer√≠as como react-forms o formik.*\n\nPor ejemplo:\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction TwoWayBindingExample() {\n  const [name, setName] = useState('midu');\n\n  return (\n    <div>\n      <p>Hello, {name}</p>\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default TwoWayBindingExample;\n```\n\n*En este ejemplo, el componente tiene un estado inicial llamado **name** con el valor **midu**. La funci√≥n **setName** se utiliza para actualizar el estado **name** cuando se produce un evento **onChange** en el input, y se puede ver reflejado en el valor del input. Sin embargo, en este caso se est√° utilizando el atributo **value** para que el valor del input sea actualizado con el valor del estado, es decir, se est√° actualizando tanto el estado como el input.*\n\n**Por si no qued√≥ claro:**\n\nEn t√©rminos sencillos, el **Binding** en React puede compararse con una cafetera y una taza de caf√©. **El estado** del componente ser√≠a la *cafetera*, y **la vista** del componente ser√≠a *la taza de caf√©*.\n\nEn el caso del **One-Way Binding**, la cafetera solo puede verter caf√© en una direcci√≥n, hacia la taza de caf√©. Esto significa que la cafetera puede llenar autom√°ticamente la taza de caf√© con caf√© fresco, pero la taza de caf√© no puede devolver autom√°ticamente el caf√© a la cafetera. De esta manera, **el estado** del componente *(la cafetera)* puede actualizar autom√°ticamente **la vista** *(la taza de caf√©)* cuando cambia, pero la **vista** no puede actualizar autom√°ticamente el **estado**.\n\nEn el caso del **Two-Way Binding**, la cafetera puede verter y recibir caf√© en ambas direcciones, hacia y desde la taza de caf√© (no s√© por qu√© alguien necesitar√≠a hacer algo as√≠). Esto significa que la cafetera puede llenar y vaciar autom√°ticamente la taza de caf√© con caf√© fresco. De esta manera, tanto **el estado** del componente como **la vista** pueden actualizarse autom√°ticamente entre s√≠.\n\nS√≠ quieres saber m√°s comparto el siguiente enlace:  \n[How To Bind Any Component to Data in React: One-Way Binding](https://www.telerik.com/blogs/how-to-bind-any-component-data-react-one-way-binding)  \n\n**[‚¨Ü Volver a √≠ndice](#√≠ndice)**\n\n---",
        "question_level": "Principiante",
        "question_last": "regular",
        "topic": "React web",
        "answer_options": [
            {
                "option": "En React, el **Binding** se refiere a la forma en que se relaciona y sincroniza el **estado** *(state)* de un componente con su **vista** *(render)*",
                "correct_answer": true
            },
            {
                "option": "Es un m√©todo para mejorar la velocidad de la aplicaci√≥n.",
                "correct_answer": false
            },
            {
                "option": "Un est√°ndar de JavaScript para manipular la UI.",
                "correct_answer": false
            },
            {
                "option": "Una herramienta exclusiva de React Native.",
                "correct_answer": false
            }
        ]
    }
]